
=== ./preload.js ===
// This is a placeholder preload script.
// With nodeIntegration: true and contextIsolation: false,
// the renderer process can directly access Node.js APIs.

=== ./js/ui/server-form.js ===
/**
 * Server Form
 * Handles the server form functionality
 */

=== ./js/ui/about-modal.js ===
/**
 * About Modal
 * Handles the about modal functionality
 */
  // Initialize DOM elements after modals are loaded
    // DOM elements
  /**
   * Initialize the about modal
   */
    // Initialize DOM elements first
    // Set up event listeners
    // Set up installation links
  /**
   * Open the about modal
   */
      // Get prerequisites status
      // Update status display
      // Show modal
  /**
   * Update status display
   * @param {object} status - Prerequisites status
   */
    // Set version
    // Docker status
    // Node.js status
// Create and export a singleton instance

=== ./js/ui/paste-modal.js ===
/**
 * Paste Modal
 * Handles the paste functionality
 */
  // Initialize DOM elements after modals are loaded
    // DOM elements
  /**
   * Initialize the paste modal
   */
    // Initialize DOM elements first
    // Set up event listeners
  /**
   * Open the paste modal
   */
    // Clear textarea
    // Show modal
  /**
   * Handle load button click
   */
      // Parse JSON
      // Validate structure
      // Extract server data
      // Close paste modal
      // Open server form with pasted data
// Create and export a singleton instance

=== ./js/ui/add-server-modal.js ===
/**
 * Add Server Modal
 * Unified entry point for adding servers (templates, manual, import)
 */
    // Create modal element
    // DOM elements
    // Initialize event listeners
  /**
   * Create the modal HTML
   */
    // Create modal element
    // Set modal content
    // Add modal to document
    // Add styles
  /**
   * Add styles for the modal
   */
    // Create style element
    // Set style content
    // Add style to document
  /**
   * Initialize event listeners
   */
    // Close button
    // ESC key to close
    // Manual option
    // Import option
    // Paste JSON option
    // URL option
    // URL import form
  /**
   * Open the modal
   */
    // Reset the form
    // Show the modal
  /**
   * Close the modal
   */
  /**
   * Import from URL
   */
      // Show loading state
      // Fetch the URL
      // Parse the response using the imported function
      // Close the modal
      // Open the server form with the parsed config
      // Reset loading state
// Create and export a singleton instance

=== ./js/ui/server-form/form-submission.js ===
/**
 * Server Form Submission
 * Handles form submission and validation
 */
/**
 * Handle form submission
 * @param {Event} e - Form submit event
 * @param {Object} serverForm - The server form instance
 */
  // Check if quick view is active
    // Handle quick view form submission
    // Get the original config to preserve metadata
    // Handle based on template type
        // For unknown templates, use the advanced view
    // If config is null, validation failed
    // Handle advanced view form submission
    // If config is null, validation failed
  // Add or update configuration
    // Editing existing server
    // Adding new server
  // Show restart warning
  // Close modal
/**
 * Handle advanced form submission
 * @param {Object} serverForm - The server form instance
 * @param {object} config - Server configuration
 * @param {string} type - Server type
 * @returns {object} - Updated server configuration
 */

=== ./js/ui/server-form/form-fields.js ===
/**
 * Server Form - Form Fields Module
 * Handles dynamic form field generation and manipulation.
 */
/**
 * Initialize the type selector
 * @param {NodeList} typeRadios - Type radio buttons
 */
/**
 * Set up the generic form with configuration
 * @param {object} config - Server configuration
 * @param {HTMLElement} cmdInput - Command input element
 * @param {HTMLElement} genericArgs - Generic arguments container
 * @param {HTMLElement} genericEnv - Generic environment variables container
 * @param {HTMLElement} genericDis - Generic disabled checkbox
 */
/**
 * Set up the NPX form with configuration
 * @param {object} config - Server configuration
 * @param {HTMLElement} npxRepo - NPX repository input element
 * @param {NodeList} npxFlags - NPX flags checkboxes
 * @param {HTMLElement} npxArgs - NPX arguments container
 * @param {HTMLElement} npxEnv - NPX environment variables container
 * @param {HTMLElement} npxDis - NPX disabled checkbox
 */
/**
 * Set up the Docker form with configuration
 * @param {object} config - Server configuration
 * @param {HTMLElement} dockerImage - Docker image input element
 * @param {NodeList} dockerFlags - Docker flags checkboxes
 * @param {HTMLElement} dockerPorts - Docker ports container
 * @param {HTMLElement} dockerVolumes - Docker volumes container
 * @param {HTMLElement} dockerEnv - Docker environment variables container
 * @param {HTMLElement} dockerDis - Docker disabled checkbox
 */
/**
 * Handle advanced form submission
 * @param {string} type - Server type
 * @param {object} config - Server configuration
 * @param {HTMLElement} cmdInput - Command input element
 * @param {HTMLElement} genericArgs - Generic arguments container
 * @param {HTMLElement} genericEnv - Generic environment variables container
 * @param {HTMLElement} genericDis - Generic disabled checkbox
 * @param {HTMLElement} npxRepo - NPX repository input element
 * @param {NodeList} npxFlags - NPX flags checkboxes
 * @param {HTMLElement} npxArgs - NPX arguments container
 * @param {HTMLElement} npxEnv - NPX environment variables container
 * @param {HTMLElement} npxDis - NPX disabled checkbox
 * @param {HTMLElement} dockerImage - Docker image input element
 * @param {NodeList} dockerFlags - Docker flags checkboxes
 * @param {HTMLElement} dockerPorts - Docker ports container
 * @param {HTMLElement} dockerVolumes - Docker volumes container
 * @param {HTMLElement} dockerEnv - Docker environment variables container
 * @param {HTMLElement} dockerDis - Docker disabled checkbox
 * @returns {object} - Updated server configuration
 */

=== ./js/ui/server-form/view-modes.js ===
/**
 * Server Form - View Modes Module
 * Handles switching between quick and advanced views.
 */
// Alias for setupViewModeToggle to maintain compatibility with index.js
// Alias for setupQuickViewAdvancedOptionsToggle to maintain compatibility with index.js
  // Show view toggle
  // Set quick view as active

=== ./js/ui/server-form/index.js ===
/*
 * CODING CONSTITUTION - MANDATORY RULES:
 * 
 * 1. Never change anything that has not been discussed with the user or is unrelated to the current task.
 * 2. Never add placeholders or dummy or demo data without an explicit request from the user.
 * 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.
 * 4. Never make assumptions on behalf of the user. If you don't know how to do something or keep going 
 *    round in circles, you stop and think about the cause instead of doing trial and error and wasting 
 *    the user's time and money.
 * 5. When there is a bug, your most important task is to identify the possible reasons and use debugging 
 *    techniques (don't ever ask the user to read code and debug for you) to reduce the search radius, 
 *    e.g. add a log that would confirm an assumption before starting to code.
 * 6. When you fix something and the error is not fixed because you made a wrong assumption, you undo 
 *    this yourself without an explicit request from the user.
 * 
 * WARNING: NOT ADHERING TO THESE LAWS IS CONSIDERED BREAKING THE LAW AND COULD LEAD TO SEVERE DAMAGE.
 */
/**
 * Server Form
 * Main entry point for the server form module
 */
    // Current server being edited
  // Initialize DOM elements and event listeners after modals are loaded
    // Form elements
    // View toggle
    // Quick view elements
    // Type selector
    // Generic fields
    // NPX fields
    // Docker fields
    // Cancel button
  /**
   * Initialize the server form
   */
    // Initialize DOM elements first
    // Set up form submission handler
    // Set up cancel button
    // Set up view mode toggle
    // Set up quick view advanced options toggle
    // Set up type selector
    // Set up dynamic row buttons
  /**
   * Open the server form modal
   * @param {string} name - Server name (optional, for editing)
   */
  /**
   * Open the server form modal with a pre-configured server
   * @param {object} config - Server configuration object
   * @param {string} config.name - Server name
   * @param {object} config.config - Server configuration
   */
  /**
   * Fill the form with server data
   * @param {string} name - Server name
   * @param {object} config - Server configuration
   * @param {boolean} isExisting - Whether this is an existing server
   */
// Create and export a singleton instance

=== ./js/ui/server-form/template-handlers/filesystem.js ===
/**
 * Server Form - Filesystem Template Handler
 * Handles form generation and submission for the Filesystem template.
 */
// Alias for generateFilesystemForm to maintain compatibility with index.js
// Function to initialize directory rows for index.js compatibility
  // Clear existing rows
  // Add directory rows
  // If no directories, add an empty row
  // Set up add directory button
// Alias for handleFilesystemSubmit to maintain compatibility with index.js

=== ./js/ui/server-form/template-handlers/apify.js ===
/**
 * Server Form - Apify Template Handler
 * Handles form generation and submission for the Apify template.
 */
// Alias for generateApifyForm to maintain compatibility with index.js
// Function to add an actor row
// Function to initialize actor rows for index.js compatibility
  // Clear existing rows
  // Add actor rows
  // If no actors, add an empty row
  // Set up add actor button
// Alias for handleApifySubmit to maintain compatibility with index.js

=== ./js/ui/server-form/template-handlers/zapier.js ===
/**
 * Zapier Template Handler
 * Handles form generation and submission for Zapier MCP servers
 */
/**
 * Generate form HTML for Zapier template
 * @param {object} config - Server configuration
 * @returns {string} - HTML string for the form
 */
  // Extract URL from config if editing existing server
/**
 * Handle form submission for Zapier template
 * @param {object} config - Base server configuration
 * @returns {object} - Updated server configuration
 */
  // Validate URL
  // Basic URL validation
  // Update configuration
  // Add metadata to identify this as a Quick Add server

=== ./js/ui/server-form/template-handlers/tavily.js ===
/**
 * Server Form - Tavily Template Handler
 * Handles form generation and submission for the Tavily template.
 */
// Alias for generateTavilyForm to maintain compatibility with index.js
// Alias for handleTavilySubmit to maintain compatibility with index.js

=== ./js/ui/server-form/template-handlers/composio.js ===
/**
 * Server Form - Composio Template Handler
 * Handles form generation and submission for the Composio template.
 */
/**
 * Generate form for Composio template
 * @param {object} config - Server configuration
 * @returns {string} - Form HTML
 */
/**
 * Handle Composio form submission
 * @param {object} config - Server configuration
 * @returns {object} - Updated server configuration
 */
  // Preserve existing configuration

=== ./js/ui/server-form/template-handlers/composio-mcp.js ===
/**
 * Composio MCP Module
 * Handles MCP server creation for Composio connections
 */
/**
 * Create an MCP server for the current connection
 * @param {string} name - The name for the MCP server
 * @returns {Object} - The MCP server details
 */
    // Get all V3 connections
    // Find the matching connection by ID
    // Create MCP server
/**
 * Get the MCP server URL
 * @param {Object} mcpServer - The MCP server object
 * @returns {string} - The MCP server URL
 */

=== ./js/ui/server-form/template-handlers/composio-ui.js ===
/**
 * Composio UI Module
 * Handles UI components and event handlers for the Composio template
 */
// Store the list of apps for use in the form
/**
 * Generate the HTML for the Composio form
 * @param {object} config - Server configuration
 * @returns {string} - Form HTML
 */
  // Extract API key from env
  // Extract app name from config if available
  // Get documentation URL from templates
  // Create form HTML
/**
 * Set up event handlers for the Composio form
 * @param {string} initialApiKey - Initial API key value
 * @param {string} initialAppName - Initial app name value
 */
  // Get DOM elements
  // Fetch apps button click handler
    // Show loading indicator
      // Initialize the Composio service
      // Fetch available apps
      // Populate the select dropdown
      // Show step 2
      // If we have an initial app name, select it
  // Back button click handler
  // Connect button click handler
    // Show step 3
      // Initiate the connection
      // Check the initial status
        // Connection is immediately active
        // App requires user-provided parameters (like API Key)
        // Show API key prompt
        // OAuth flow initiated
        // Show OAuth link
        // Initiated but not active, not pending params, and no redirect
  // Check status button click handler
        // Get connection details
          // Still not active, update user on status
  // Submit API key button click handler
        // Submit API key
        // After submitting params, let the user check the status
        // Hide API key prompt and show check status button
  // Create MCP server button click handler
        // Create MCP server
        // Show MCP server URL
  // If we already have an app name, try to fetch the apps list
    // This will populate the dropdown if the user is editing an existing configuration
/**
 * Handle connection active state
 */
  // Update status message
  // Hide OAuth and API key prompt
  // Set default MCP server name
  // Show step 4
/**
 * Get the selected app and API key
 * @returns {Object} - The selected app and API key
 */

=== ./js/ui/server-form/template-handlers/composio-connection.js ===
/**
 * Composio Connection Module
 * Handles the connection process for Composio apps
 */
// State variables
/**
 * Initialize the Composio service
 * @param {string} apiKey - The Composio API key
 * @returns {Object} - The Composio service instance
 */
    // Use the composio-service.js directly with require
    // Initialize SDK with the API key
    // Verify API key
/**
 * Fetch available apps
 * @returns {Array} - The list of available apps
 */
    // Fetch available apps
/**
 * Initiate a connection for the selected app
 * @param {string} appKey - The selected app key
 * @returns {Object} - The connection request
 */
    // Initiate the connection
/**
 * Check connection status
 * @returns {Object} - The connection details
 */
    // Get connection details
    // Preserve the auth_config from the original connection request
    // Update current connection request with the latest details
/**
 * Submit API key for a connection
 * @param {string} apiKey - The API key to submit
 * @returns {Object} - The update response
 */
    // Create a simple payload with the API key
    // Update the connection data with the provided params
/**
 * Get the current connection request
 * @returns {Object} - The current connection request
 */
/**
 * Get the Composio service
 * @returns {Object} - The Composio service
 */

=== ./js/ui/server-form/quick-view.js ===
/**
 * Server Form Quick View
 * Handles quick view setup and form generation
 */
/**
 * Set up the quick view for a Quick Add server
 * @param {Object} serverForm - The server form instance
 * @param {object} config - Server configuration
 * @param {string} templateId - Template ID
 */
  // Set up view mode
  // Set template info
  // Also set up the advanced view
  // Generate quick view form based on template type
/**
 * Set up the advanced view for a Quick Add server
 * @param {Object} serverForm - The server form instance
 * @param {object} config - Server configuration
 */
  // Detect type
  // Set type radio
  // Fill type-specific fields
/**
 * Generate the quick view form based on template type
 * @param {Object} serverForm - The server form instance
 * @param {object} config - Server configuration
 * @param {string} templateId - Template ID
 */
  // Clear quick view containers
  // Generate form based on template type
      // Initialize directory rows
      // Parse existing actors from config
      // Initialize actor rows with a slight delay to ensure DOM is ready
        // Make sure the add button is visible
      // For unknown templates, just show a message
      // Switch to advanced view

=== ./js/ui/server-form/utils.js ===
/**
 * Server Form - Utilities Module
 * Provides shared utility functions for the server form.
 */
// Aliases for form-fields.js functions to maintain compatibility with index.js

=== ./js/ui/server-form/modal-operations.js ===
/**
 * Server Form Modal Operations
 * Handles modal opening, closing, and form filling
 */
/**
 * Open the server form modal
 * @param {Object} serverForm - The server form instance
 * @param {string} name - Server name (optional, for editing)
 */
/**
 * Open the server form modal with a pre-configured server
 * @param {Object} serverForm - The server form instance
 * @param {object} config - Server configuration object
 * @param {string} config.name - Server name
 * @param {object} config.config - Server configuration
 */
/**
 * Fill the form with server data
 * @param {Object} serverForm - The server form instance
 * @param {string} name - Server name
 * @param {object} config - Server configuration
 * @param {boolean} isExisting - Whether this is an existing server
 */
  // Reset form
  // Clear dynamic containers
  // Add one blank row each
  // Set name
  // Check if this is a Quick Add server
    // This is a Quick Add server, show the quick view
  // Hide view toggle for non-Quick Add servers
  // Detect type
  // Set type radio
  // Fill type-specific fields

=== ./js/ui/modal-manager.js ===
/**
 * Modal Manager
 * Handles showing and hiding modals
 */
    // Set up global escape key handler
    // Set up close button handlers
  /**
   * Show a modal
   * @param {HTMLElement} modal - The modal element to show
   */
  /**
   * Close the active modal
   */
  /**
   * Get the active modal
   */
  /**
   * Check if a modal is active
   */
// Create and export a singleton instance

=== ./js/ui/server-list.js ===
/**
 * @file server-list.js
 * @description Handles rendering and interactions for the MCP server list.
 * 
 * This module is responsible for displaying the list of MCP servers,
 * handling user interactions with the list (edit, delete, activate, deactivate),
 * and communicating with other modules via events.
 * 
 * ## Responsibilities:
 * - Render the server list based on configuration
 * - Handle user interactions with server list items
 * - Trigger events for other modules to respond to
 * - Update the list when configuration changes
 * 
 * ## Modularization Strategy:
 * If this module grows too large, consider these strategies:
 * 
 * 1. Split rendering and event handling into separate modules
 *    (e.g., server-list-renderer.js and server-list-events.js)
 * 
 * 2. Extract complex rendering logic into template functions
 *    (e.g., createActiveServerRow, createInactiveServerRow)
 * 
 * 3. Use a component-based approach for different types of list items
 *    while maintaining the singleton pattern
 * 
 * 4. Keep the public API simple and focused on the core responsibilities
 *    (initialize, refreshList, on/trigger for events)
 */
    // Listen for config changes to refresh the list
  /**
   * Initialize the server list
   */
    // Initialize enhancements
    // Forward edit events from enhancements to this module
  /**
   * Register event listeners
   * @param {string} event - Event name
   * @param {Function} callback - Event callback
   */
  /**
   * Trigger an event
   * @param {string} event - Event name
   * @param {*} data - Event data
   */
  /**
   * Refreshes the server list based on the current configuration.
   */
    // Use enhanced list if available, otherwise fall back to basic list
  /**
   * Render the basic server list (fallback)
   */
    // Add active servers
    // Add inactive servers
  /**
   * Wires up event handlers for the server list buttons.
   */
// Create and export a singleton instance

=== ./js/ui/modal-handlers.js ===
/**
 * @file modal-handlers.js
 * @description Centralizes logic for various modals (About, JSON Editor, Paste).
 * 
 * This module provides a unified interface for handling different modal dialogs
 * in the application, including opening modals, handling form submissions,
 * and processing user interactions.
 * 
 * ## Responsibilities:
 * - Initialize modal-related DOM elements and event handlers
 * - Open and populate modal dialogs with appropriate content
 * - Process user interactions within modals (form submissions, button clicks)
 * - Communicate with other modules via events
 * 
 * ## Modularization Strategy:
 * If this module grows too large, consider these strategies:
 * 
 * 1. Split into separate modules for each modal type
 *    (e.g., about-modal.js, json-editor-modal.js, paste-modal.js)
 * 
 * 2. Create a base modal handler class that specific modal handlers can extend
 *    while maintaining the singleton pattern for each instance
 * 
 * 3. Extract common modal functionality into utility functions
 *    (e.g., modal opening/closing, form validation)
 * 
 * 4. Use a more structured event system for communication between
 *    modal handlers and other modules
 */
    // DOM references
  /**
   * Initialize the modal handlers
   */
    // Get DOM references
    // Get ACE editor instance
    // Set up event handlers
  /**
   * Opens the About modal and updates prerequisite status.
   */
    // Update About modal with prerequisite status
    // Set version in about modal
    // Installation links
  /**
   * Opens the JSON editor modal with the current configuration.
   */
  /**
   * Handles loading JSON from the paste textarea.
   */
    // Trigger an event that the renderer can listen for
  /**
   * Handles downloading/saving JSON from the editor.
   */
// Create and export a singleton instance

=== ./js/ui/json-editor.js ===
/**
 * JSON Editor
 * Handles the JSON editor functionality
 */
    // ACE editor instance
  // Initialize DOM elements after modals are loaded
    // DOM elements
  /**
   * Initialize the JSON editor
   */
    // Initialize DOM elements first
    // Initialize ACE editor
    // Set up event listeners
  /**
   * Open the JSON editor modal
   */
    // Set editor value
    // Show modal
  /**
   * Handle download button click
   */
      // Validate JSON
      // Save configuration
      // Update config manager
      // Notify listeners
      // Show restart warning
      // Close modal
// Create and export a singleton instance

=== ./js/ui/notifications.js ===
/**
 * Notifications
 * Handles warnings and notifications
 */
    // DOM elements
  /**
   * Initialize notifications
   */
    // Set up restart button
    // Set up install buttons
    // Check prerequisites
    // Listen for prerequisites status from main process
  /**
   * Check prerequisites
   */
  /**
   * Update prerequisites status
   * @param {object} status - Prerequisites status
   */
    // Update version tag if available
    // Check prerequisites
  /**
   * Show restart warning
   */
  /**
   * Hide restart warning
   */
  /**
   * Handle restart Claude button click
   */
      // Temporarily change button state
      // Hide the warning immediately
      // Start the restart process but don't await it
      // This way the function continues executing regardless of Claude restarting
      // Reset button state after a short delay
// Create and export a singleton instance

=== ./js/ui/notifications-helper.js ===
/**
 * Notifications Helper
 * Provides helper functions for showing different types of notifications
 */
/**
 * Show an info notification
 * @param {string} message - The notification message
 * @param {number} duration - The duration in milliseconds (default: 5000)
 */
/**
 * Show a success notification
 * @param {string} message - The notification message
 * @param {number} duration - The duration in milliseconds (default: 5000)
 */
/**
 * Show a warning notification
 * @param {string} message - The notification message
 * @param {number} duration - The duration in milliseconds (default: 5000)
 */
/**
 * Show an error notification
 * @param {string} message - The notification message
 * @param {number} duration - The duration in milliseconds (default: 5000)
 */
/**
 * Show a notification
 * @param {string} message - The notification message
 * @param {string} type - The notification type (info, success, warning, error)
 * @param {number} duration - The duration in milliseconds
 */
  // Create notification container if it doesn't exist
  // Create notification element
  // Set notification style based on type
  // Add message
  // Add close button
  // Add click event to dismiss notification
  // Add notification to container
  // Remove notification after duration
  // Add CSS animation
/**
 * Remove a notification
 * @param {HTMLElement} notification - The notification element
 */
  // Add fadeOut animation
  // Remove notification after animation
    // Remove container if empty

=== ./js/quick-add.js ===
/**
 * Quick Add
 * Main entry point for the Quick Add feature
 * This is a thin wrapper that imports and initializes the modular components
 */
// Export the quick add base module

=== ./js/renderer.js ===
/*
 * CODING CONSTITUTION - MANDATORY RULES:
 * 
 * 1. Never change anything that has not been discussed with the user or is unrelated to the current task.
 * 2. Never add placeholders or dummy or demo data without an explicit request from the user.
 * 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.
 * 4. Never make assumptions on behalf of the user. If you don't know how to do something or keep going 
 *    round in circles, you stop and think about the cause instead of doing trial and error and wasting 
 *    the user's time and money.
 * 5. When there is a bug, your most important task is to identify the possible reasons and use debugging 
 *    techniques (don't ever ask the user to read code and debug for you) to reduce the search radius, 
 *    e.g. add a log that would confirm an assumption before starting to code.
 * 6. When you fix something and the error is not fixed because you made a wrong assumption, you undo 
 *    this yourself without an explicit request from the user.
 * 
 * WARNING: NOT ADHERING TO THESE LAWS IS CONSIDERED BREAKING THE LAW AND COULD LEAD TO SEVERE DAMAGE.
 */
/**
 * @file renderer.js
 * @description Main renderer process for the MCP Studio application.
 * 
 * This file serves as the entry point for the renderer process and coordinates
 * the initialization and interaction between various UI modules.
 * 
 * ## Responsibilities:
 * - Initialize core modules (notifications, modal manager, server form, etc.)
 * - Set up event listeners for UI interactions
 * - Load and manage configuration
 * - Coordinate between different UI components
 * 
 * ## Modularization Strategy:
 * If this file grows too large, consider these strategies:
 * 
 * 1. Identify groups of related functionality and extract them into separate modules
 *    (e.g., server management, modal handling, configuration management)
 * 
 * 2. Create singleton modules that follow the project pattern:
 *    - Export a singleton instance, not a class
 *    - Provide an initialize() method
 *    - Use event-based communication between modules
 * 
 * 3. Keep the main renderer.js file as a coordinator that initializes and connects
 *    modules, rather than implementing detailed functionality
 * 
 * 4. Avoid over-engineering by ensuring each module has a clear, focused purpose
 *    and follows the established patterns in the project
 */
// With nodeIntegration: true and contextIsolation: false,
// we can directly require Node.js modules
// Import modules
  // ACE JSON editor setup
  // Initialize modules
  // Register event handlers
  // Initial load of configuration
  // If no servers are configured, show the paste dialog automatically
  // Quick Add functionality
  // Event listeners
  // Listen for paste:server:loaded custom event from ModalHandlers

=== ./js/config/config-manager.js ===
/*
 * CODING CONSTITUTION - MANDATORY RULES:
 * 
 * 1. Never change anything that has not been discussed with the user or is unrelated to the current task.
 * 2. Never add placeholders or dummy or demo data without an explicit request from the user.
 * 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.
 * 4. Never make assumptions on behalf of the user. If you don't know how to do something or keep going 
 *    round in circles, you stop and think about the cause instead of doing trial and error and wasting 
 *    the user's time and money.
 * 5. When there is a bug, your most important task is to identify the possible reasons and use debugging 
 *    techniques (don't ever ask the user to read code and debug for you) to reduce the search radius, 
 *    e.g. add a log that would confirm an assumption before starting to code.
 * 6. When you fix something and the error is not fixed because you made a wrong assumption, you undo 
 *    this yourself without an explicit request from the user.
 * 
 * WARNING: NOT ADHERING TO THESE LAWS IS CONSIDERED BREAKING THE LAW AND COULD LEAD TO SEVERE DAMAGE.
 */
/**
 * Configuration Manager
 * Handles reading and writing MCP server configurations
 */
// Default configuration
  /**
   * Load configuration from file
   */
        // Ensure required properties exist
  /**
   * Save configuration to file
   */
  /**
   * Get the current configuration
   */
  /**
   * Add a server to the configuration
   * @param {string} name - Server name
   * @param {object} serverConfig - Server configuration
   * @param {string} state - 'active' or 'inactive'
   */
      // Remove from inactive if it exists there
      // Ensure inactive object exists
      // Remove from active if it exists there
  /**
   * Update an existing server
   * @param {string} name - Server name
   * @param {string} originalName - Original server name (if renamed)
   * @param {object} serverConfig - Server configuration
   * @param {boolean} disabled - Whether the server is disabled
   */
    // Determine if we're editing an inactive server
    // Remove the server from its original location if it's being renamed
    // Determine where to save the server based on the disabled flag
      // Save to inactive section
      // Remove disabled flag as it's implied by being in the inactive section
      // Save to inactive section
      // Remove from active section if it exists there
      // Save to active section
      // Remove from inactive section if it exists there
  /**
   * Delete a server from the configuration
   * @param {string} name - Server name
   * @param {string} section - 'active' or 'inactive'
   */
  /**
   * Move a server between active and inactive sections
   * @param {string} name - Server name
   * @param {string} targetSection - 'active' or 'inactive'
   */
      // Move from inactive to active
      // Move from active to inactive
  /**
   * Get a server configuration by name
   * @param {string} name - Server name
   * @returns {object|null} Server configuration or null if not found
   */
  /**
   * Check if the configuration has any servers
   */
  /**
   * Add a change listener
   * @param {Function} listener - Callback function
   */
  /**
   * Remove a change listener
   * @param {Function} listener - Callback function
   */
  /**
   * Notify all change listeners
   */
// Create and export a singleton instance

=== ./js/features/log-viewer.js ===
/**
 * Log Viewer
 * Handles displaying and filtering MCP server logs
 */
    // DOM elements - will be initialized when the modal is created
  /**
   * Initialize the log viewer
   */
    // Create the modal if it doesn't exist
    // Set up event listeners
  /**
   * Create the log viewer modal
   */
    // Create modal element if it doesn't exist
      // Append modal to body
      // Cache DOM elements
      // Add close button handler
  /**
   * Set up event listeners
   */
    // Filter buttons
    // Auto-scroll toggle
    // Refresh button
  /**
   * Open the log viewer modal
   */
  /**
   * Load logs from the file system
   */
      // Call the main process to get logs
      // Populate server list
      // Select the first server or keep the current selection
      // Render logs for the selected server
  /**
   * Populate the server list
   */
      // Check if server has errors
  /**
   * Render logs for the selected server
   */
    // Filter logs based on the selected filter
    // Render logs
      // Check if the message contains JSON
    // Scroll to bottom if auto-scroll is enabled
  /**
   * Scroll to the bottom of the log content
   */
  /**
   * Parse a log line into a structured object
   * @param {string} line - Log line to parse
   * @returns {object} Parsed log entry
   */
      // Example log format: 2025-05-12T16:17:33.029Z [tavily-mcp] [info] Initializing server...
      // Check if the message contains JSON
          // Not valid JSON, ignore
// Create and export a singleton instance

=== ./js/features/server-list-enhancements.js ===
/**
 * @file server-list-enhancements.js
 * @description Main entry point for server list enhancements
 */
  /**
   * Initialize the enhanced server list
   */
  /**
   * Register event listeners
   */
  /**
   * Refresh the enhanced server list
   */
// Create and export a singleton instance

=== ./js/features/marketplace/categories.js ===
/**
 * Marketplace Categories Module
 * Handles category rendering and filtering
 */
/**
 * Create a category element
 * @param {string} category - Category name
 * @param {Array} items - Items in the category
 * @returns {HTMLElement} - Category element
 */
  // Count available items
  // Get icon for category
  // Get color for category
  // Set the color bar at the top
  // Create category content without the icon first
  // Insert the icon using innerHTML to ensure proper rendering
  // Add click event
/**
 * Populate the marketplace with categories
 * @param {Array} items - Marketplace items
 * @param {HTMLElement} categoriesContainer - The categories container element
 * @param {Function} groupByCategory - Function to group items by category
 */
  // Group items by category
  // Create category cards
/**
 * Filter categories based on search query
 * @param {string} query - Search query
 * @param {Array} allItems - All marketplace items
 * @param {HTMLElement} categoriesContainer - The categories container element
 * @param {Function} showSearchResults - Function to show search results
 */
  // Normalize query
  // If query is empty, reset and show all categories
    // Reset to categories view
    // Show all category cards
    // Hide any "no results" message
  // Search across all items for the current query only
  // For short queries (1-2 characters), just filter categories
    // Reset to categories view
    // Get unique categories from matching items for this query only
    // Show/hide categories based on whether they contain matching items
      // Show if category name matches OR if category contains matching items
    // Show "no results" message if no categories match
      // Hide any "no results" message
  // For longer queries (3+ characters), show matching items directly
    // No matching items, reset to categories view with no results
    // Hide all categories since no items match
    // Show "no results" message

=== ./js/features/marketplace/icons.js ===
/**
 * Marketplace Icons
 * Contains Font Awesome icons for marketplace categories
 */
// Map of category names to Font Awesome icons
// Default icon for categories not in the map
/**
 * Get icon for a category
 * @param {string} category - Category name
 * @returns {string} - HTML icon as a string
 */

=== ./js/features/marketplace/ui.js ===
/**
 * Marketplace UI Module
 * Handles rendering the marketplace UI
 */
// Import modular components
// DOM element references
/**
 * Initialize the marketplace UI
 */
  // Create modal and get DOM references
  // Store DOM references
  // Set up event listeners
/**
 * Set up event listeners
 */
  // Close button
  // Back to categories button
    // Reset search input when going back to categories
  // Back to items button
  // Filter toggle
/**
 * Show the categories view
 */
/**
 * Show the items view
 */
/**
 * Populate the marketplace with categories
 * @param {Array} items - Marketplace items
 */
  // Store all items for later use
  // Populate categories
/**
 * Apply current filter to items
 */
  // Update items module with filtered items
  // Refresh the display
  // Update search with filtered items
  // Update filter stats
/**
 * Update filter statistics display
 */
/**
 * Open the marketplace modal
 * @param {Array} items - Marketplace items
 */
  // Store all items
  // Reset filter state
  // Apply initial filter (NPX only)
  // Store filtered items for later use
  // Display filtered items
  // Initialize search functionality with filtered items
  // Update filter stats
  // Show items view directly
  // Show modal

=== ./js/features/marketplace/index.js ===
/**
 * Marketplace Module
 * Main entry point for the marketplace feature
 */
/**
 * Initialize the marketplace module
 */
  // Initialize UI
  // Listen for prerequisites status updates
/**
 * Open the marketplace modal
 */
    // Load marketplace data
    // Filter items based on prerequisites
    // Open the marketplace modal
// Create and export a singleton instance

=== ./js/features/marketplace/colors.js ===
/**
 * Marketplace Colors
 * Contains colors for marketplace categories
 */
// Map of category names to colors - using a more varied and interesting palette
// Additional colors for new categories
// Default color for categories not in the map
/**
 * Get color for a category
 * @param {string} category - Category name
 * @returns {string} - CSS color
 */
  // For categories not in the map, use a hash function to pick a consistent color

=== ./js/features/marketplace/data.js ===
/**
 * Marketplace Data Module
 * Handles loading and parsing marketplace data
 */
/**
 * Load marketplace data from the default location or a configured URL
 * @returns {Promise<Array>} - Array of marketplace items
 */
    // Try to load from the default location (marketplace.json)
/**
 * Filter marketplace items based on prerequisites
 * @param {Array} items - Marketplace items
 * @param {Object} prerequisites - Prerequisites status (docker, nodejs)
 * @returns {Array} - Filtered marketplace items with availability flag
 */
  // NO FILTERING - mark ALL items as available
/**
 * Group marketplace items by category
 * @param {Array} items - Marketplace items
 * @returns {Object} - Items grouped by category
 */

=== ./js/features/marketplace/filters.js ===
/**
 * Marketplace Filters Module
 * Generic filtering functions for marketplace items
 */
/**
 * Check if an item is NPX-installable
 * @param {Object} item - Marketplace item
 * @returns {boolean} - True if item can be installed via NPX
 */
  // Check if any server in the item uses NPX
/**
 * Filter items by NPX availability
 * @param {Array} items - Array of marketplace items
 * @param {boolean} showExperimental - Whether to include experimental (non-NPX) items
 * @returns {Array} - Filtered array of items
 */
    // Show all items
  // Show only NPX-installable items
/**
 * Get filter statistics
 * @param {Array} items - Array of marketplace items
 * @returns {Object} - Statistics about NPX vs experimental items
 */

=== ./js/features/marketplace/items.js ===
/**
 * Marketplace Items Module
 * Handles item listing and filtering
 */
// State variables
/**
 * Set all items
 * @param {Array} items - All marketplace items
 */
/**
 * Get all items
 * @returns {Array} - All marketplace items
 */
/**
 * Set current category
 * @param {string} category - Category name
 */
/**
 * Get current category
 * @returns {string} - Current category
 */
/**
 * Create an item element
 * @param {Object} item - Marketplace item
 * @param {boolean} showCategory - Whether to show the category label
 * @returns {HTMLElement} - Item element wrapper
 */
  // Create wrapper for consistent sizing
  // Create the actual item element
  // Get category color for the label
  // Format the repository name
  // Create item content
  // Add click event
  // Add the item to the wrapper
/**
 * Show all items without category filtering
 */
  // Get the items container
  // Clear items container
  // Filter for available items only
  // Create items
    // Show no items message
  // Update search placeholder
/**
 * Show items for a specific category
 * @param {string} category - Category name
 */
  // Filter items by category
  // Update category title
  // Apply category color to title
  // Set the icon color to match the category
  // Get category icon
  // Set the title text first
  // Then prepend the icon to ensure proper rendering
  // Get the items container
  // Clear items container
  // Filter for available items only
  // Create items
    // Show no items message
  // Show items view
  // Update search placeholder
/**
 * Show search results as a list of items
 * @param {Array} items - Matching items
 * @param {string} query - Search query
 */
  // Update category title
  // Apply styling to title
  // Get the items container
  // Clear items container
  // Filter for available items only
  // Create items with category labels
    // Show no results message
  // Update back button text
  // Show items view (which now contains search results)
  // Update search placeholder
/**
 * Filter items based on search query
 * @param {string} query - Search query
 */
  // Normalize query
  // Get the items container
  // Get the current category items
    // If we're in search results view, use all items
  // If query is empty, show all items for the current category or search
    // Clear the container
    // Show all items for the current category or search
      // Filter for available items only
        // Show no items message
  // Filter items based on query
  // Clear the container
  // Add filtered items to the container
    // Filter for available items only
      // Show no results message
    // Show no results message
/**
 * Show item details
 * @param {Object} item - Marketplace item
 */
  // Import the details module dynamically to avoid circular dependencies

=== ./js/features/marketplace/utils.js ===
/**
 * Marketplace Utilities
 * Shared utility functions for the marketplace
 */
/**
 * Format a repository name to be more human-readable
 * @param {string} repoName - The repository name
 * @returns {string} - The formatted name
 */
  // Replace hyphens and underscores with spaces
  // Capitalize each word
  // Handle special cases like "MCP" that should be all caps
/**
 * Convert markdown to HTML
 * @param {string} markdown - Markdown content
 * @returns {string} - HTML content
 */
    // Code blocks
    // Inline code
    // Headers
    // Bold
    // Italic
    // Links
    // Lists
    // Paragraphs
  // Wrap lists
/**
 * Truncate text to a specified length with a smart breakpoint
 * @param {string} text - Text to truncate
 * @param {number} maxLength - Maximum length
 * @returns {string} - Truncated text
 */
  // Find a good breaking point (end of sentence or space)

=== ./js/features/marketplace/details.js ===
/**
 * Marketplace Details Module
 * Handles item details view
 */
// Current item being viewed
/**
 * Set current item
 * @param {Object} item - Marketplace item
 */
/**
 * Get current item
 * @returns {Object} - Current marketplace item
 */
/**
 * Show item details
 * @param {Object} item - Marketplace item
 */
  // Hide items view, show details view
  // Format the repository name
  // Get the details container
  // Populate details
  // Load README
  // Add import button event listener
/**
 * Load README content
 * @param {string} url - README URL
 */
    // Convert markdown to HTML
/**
 * Import a server from the marketplace
 * @param {Object} item - Marketplace item
 */
    // Show loading state
    // Try to use mcpServers configuration first
      // Create config from mcpServers data
      // Close the marketplace modal
      // Add the server to Quick Add templates
      // Open Quick Add modal
    // Fallback to README parsing if no mcpServers data
    // Fetch the README
    // Parse the README to extract server configuration
    // Close the marketplace modal
    // Add the server to Quick Add templates
    // Open Quick Add modal
/**
 * Add a marketplace item to Quick Add templates
 * @param {Object} item - Marketplace item
 * @param {Object} config - Server configuration
 */
  // Use repo_name directly as the template ID without the "marketplace-" prefix
  // Format the name to be more human-readable
  // Truncate description to ~150 characters
    // Find a good breaking point (end of sentence or space)
  // Extract user inputs dynamically from mcpServers data
    // Create user inputs for each parameter
      // Map parameter types to Quick Add input types
  // Create a template object
  // Add the template to the global templates object

=== ./js/features/marketplace/search.js ===
/**
 * Marketplace Search Module
 * Handles search functionality
 */
/**
 * Initialize search functionality
 * @param {Array} allItems - All marketplace items
 * @param {HTMLElement} categoriesContainer - The categories container element
 * @param {Function} showSearchResults - Function to show search results
 */
  // Search input
  // Add input event listener
  // Add a blur event to ensure search is properly applied when focus is lost
    // Re-apply the current search to ensure consistent state
/**
 * Handle search input
 * @param {string} query - Search query
 * @param {Array} allItems - All marketplace items (initial value, may be stale)
 * @param {HTMLElement} itemsContainer - The items container element
 * @param {Function} showSearchResults - Function to show search results
 */
  // Always use the latest items from the items module
  // Since we're always in items view now, just filter items directly
/**
 * Reset search input
 */
/**
 * Update search placeholder
 * @param {string} placeholder - New placeholder text
 */
/**
 * Get current search query
 * @returns {string} - Current search query
 */

=== ./js/features/marketplace/modal.js ===
/**
 * Marketplace Modal Module
 * Handles the creation and setup of the marketplace modal
 */
// DOM element references
/**
 * Create the marketplace modal
 * @returns {Object} - References to DOM elements
 */
  // Create modal element if it doesn't exist
    // Append modal to body
  // Cache DOM elements
/**
 * Show the marketplace modal
 * @param {HTMLElement} modal - The modal element
 */
/**
 * Close the marketplace modal
 */
/**
 * Show the categories view
 * @param {HTMLElement} categoriesContainer - The categories container element
 */
  // Reset search input and placeholder
  // Reset category title container style
  // Show all category cards
  // Hide any "no results" message
/**
 * Show the items view
 */
/**
 * Show the details view
 */

=== ./js/features/composio-marketplace/ui.js ===
/**
 * Composio Marketplace UI Module
 * Handles rendering the Composio marketplace UI
 */
// Import modular components
// DOM element references
/**
 * Initialize the Composio marketplace UI
 */
  // Create modal and get DOM references
  // Store DOM references
  // Set up event listeners
/**
 * Set up event listeners
 */
  // Close button
  // Back to items button
  // API Key Settings button
  // Filter checkbox
/**
 * Show the items view
 */
/**
 * Populate the Composio marketplace with items
 * @param {Array} items - Composio marketplace items
 */
  // Store all items for later use
  // Display all items directly
/**
 * Open the Composio marketplace modal
 * @param {Array} items - Composio marketplace items
 */
  // Populate marketplace with items directly
  // Get all items after they've been stored
  // Initialize search functionality with the populated items
  // Show items view directly
  // Show modal

=== ./js/features/composio-marketplace/composio-connector.js ===
/**
 * Composio Connector Module
 * Handles the connection process for Composio apps in the marketplace
 */
// State variables
/**
 * Initialize the Composio service
 * @returns {Object} - The Composio service instance
 */
    // Get API key from storage
    // Use the composio-service.js module
    // Initialize SDK with the API key
    // Verify API key
/**
 * Check for existing connections to an app
 * @param {string} appKey - The app key to check
 * @returns {Promise<Array>} - Array of existing connections
 */
    // Initialize service if not already initialized
    // Get existing connections for this app
/**
 * Delete all connections for an app
 * @param {string} appKey - The app key
 * @returns {Promise<Array>} - Array of deletion results
 */
    // Initialize service if not already initialized
    // Delete all connections for this app
    // Show notification
/**
 * Connect to a Composio app with existing connection check
 * @param {Object} item - The Composio app item
 * @param {boolean} skipExistingCheck - Skip checking for existing connections
 * @returns {Promise<Object>} - The connection result
 */
    // Initialize service if not already initialized
    // Check for existing connections unless skipped
        // Return existing connections info for UI to handle
    // Initiate connection
/**
 * Check connection status
 * @returns {Promise<Object>} - The connection details
 */
    // Get connection details
    // Update current connection request with the latest details
/**
 * Submit API key for a connection
 * @param {string} apiKey - The API key to submit
 * @returns {Promise<Object>} - The update response
 */
    // Create a simple payload with the API key
    // Update the connection data with the provided params
/**
 * Create an MCP server for the current connection
 * @param {string} name - The name for the MCP server
 * @returns {Promise<Object>} - The MCP server details
 */
    // Get all V3 connections
    // Find the matching connection by ID
    // Create MCP server
/**
 * Get the MCP server URL
 * @param {Object} mcpServer - The MCP server object
 * @returns {string} - The MCP server URL
 */
/**
 * Add MCP server to the application configuration
 * @param {string} name - The name for the MCP server
 * @param {Object} mcpServer - The MCP server object from Composio API
 * @returns {Promise<boolean>} - Whether the operation was successful
 */
    // Create server configuration
    // Add server to configuration
    // Save configuration
    // Show notification
/**
 * Get the current connection request
 * @returns {Object} - The current connection request
 */
/**
 * Check if a Composio app is already installed
 * @param {string} appKey - App key to check
 * @returns {boolean} True if app is installed
 */
/**
 * Get all installed Composio servers
 * @returns {Array} Array of installed Composio app keys
 */
/**
 * Get the Composio service
 * @returns {Object} - The Composio service
 */

=== ./js/features/composio-marketplace/index.js ===
/**
 * Composio Marketplace Module
 * Main entry point for the Composio apps marketplace feature
 */
/**
 * Initialize the Composio marketplace module
 */
  // Initialize UI
  // Listen for prerequisites status updates
/**
 * Open the Composio marketplace modal
 */
    // Load Composio apps data
    // Filter items based on prerequisites
    // Force all items to have "Composio Apps" category
    // Open the marketplace modal
// Create and export a singleton instance

=== ./js/features/composio-marketplace/connection-flow-handler.js ===
/**
 * Connection Flow Handler Module
 * Handles main connection flow logic
 */
/**
 * Create OAuth and API key containers
 * @param {HTMLElement} detailsContainer - The details container
 * @param {Object} item - Composio marketplace item
 */
  // Add OAuth container
  // Add API key container
/**
 * Handle connection response
 * @param {Object} connection - Connection response
 * @param {Object} item - Composio marketplace item
 */
    // OAuth flow
    // API key required
    // Connection is already active
    // Other status
/**
 * Check connection status and automatically save MCP server
 * @param {Object} item - Composio marketplace item
 */
/**
 * Submit API key for a connection
 * @param {string} apiKey - The API key to submit
 * @param {Object} item - Composio marketplace item
 */
/**
 * Automatically create and save MCP server
 * @param {Object} item - Composio marketplace item
 */
/**
 * Hide all containers
 */
/**
 * Export hide function for external use
 */

=== ./js/features/composio-marketplace/data.js ===
/**
 * WARNING: CREATING DEMO/DUMMY DATA WITHOUT EXPLICIT USER CONSENT IS FRAUD AND AGAINST THE LAW.
 * ANY IMPLEMENTATION OF DEMO DATA GENERATION WITHOUT USER PERMISSION IS STRICTLY PROHIBITED.
 * VIOLATORS MAY BE SUBJECT TO LEGAL ACTION.
 */
/**
 * Composio Marketplace Data Module
 * Handles loading and parsing Composio apps data
 */
/**
 * Load Composio apps data from the API and cache it
 * @returns {Promise<Array>} - Array of Composio apps
 */
  // Check cache first
  // If cache exists and is less than 24 hours old
  // Fetch fresh data
    // Get API key from storage
    // If no API key is set, return empty array
    // Initialize SDK
      // If the API key is invalid, clear it and show an error
        // Import the modal module to show the API key form
    // Fetch toolkits using V3 API
      // If toolkits is empty or undefined, return empty array
      // Transform toolkits to match marketplace item format
      // Cache the data
/**
 * Filter Composio apps based on prerequisites
 * @param {Array} items - Composio apps
 * @param {Object} prerequisites - Prerequisites status (docker, nodejs)
 * @returns {Array} - Filtered Composio apps with availability flag
 */
  // Force all items to be available regardless of prerequisites
/**
 * Group Composio apps by category
 * @param {Array} items - Composio apps
 * @returns {Object} - Items grouped by category
 */

=== ./js/features/composio-marketplace/items.js ===
/**
 * Composio Marketplace Items Module
 * Handles item listing and filtering
 */
// State variables
/**
 * Set all items
 * @param {Array} items - All Composio marketplace items
 */
  // Force all items to have available flag set to true
/**
 * Get all items
 * @returns {Array} - All Composio marketplace items
 */
/**
 * Set current category
 * @param {string} category - Category name
 */
/**
 * Get current category
 * @returns {string} - Current category
 */
/**
 * Set filter for installed apps
 * @param {boolean} showInstalled - Whether to show only installed apps
 */
/**
 * Apply current filters to the items
 */
/**
 * Show filtered items
 * @param {Array} items - Filtered items to display
 */
  // Clear items container
  // Filter for available items only
  // Create items
    // Show no items message
/**
 * Create an item element
 * @param {Object} item - Composio marketplace item
 * @param {boolean} showCategory - Whether to show the category label
 * @returns {HTMLElement} - Item element wrapper
 */
  // Create wrapper for consistent sizing
  // Create the actual item element
  // Get category color for the label
  // Create toolkit logo HTML
  // Create item content with toolkit logo
  // Add click event for the item (show details)
  // Add the item to the wrapper
/**
 * Show all items
 */
  // Get the items container
  // Clear items container
  // Filter for available items only
  // Create items
    // Show no items message
/**
 * Show items for a specific category
 * @param {string} category - Category name
 */
  // Filter items by category
  // Update category title
    // Apply category color to title
      // Set the icon color to match the category
      // Get category icon
      // Set the title text first
      // Then prepend the icon to ensure proper rendering
  // Get the items container
  // Clear items container
  // Filter for available items only
  // Create items
    // Show no items message
  // Show items view
  // Update search placeholder
/**
 * Show search results as a list of items
 * @param {Array} items - Matching items
 * @param {string} query - Search query
 */
  // Update category title
    // Apply styling to title
  // Get the items container
  // Clear items container
  // Filter for available items only
  // Create items with category labels
    // Show no results message
  // Show items view (which now contains search results)
  // Update search placeholder
/**
 * Filter items based on search query
 * @param {string} query - Search query
 */
  // Normalize query
  // Get the items container
  // Get the current category items
    // If we're in search results view, use all items
  // If query is empty, show all items for the current category or search
    // Clear the container
    // Show all items for the current category or search
      // Filter for available items only
        // Show no items message
  // Filter items based on query
  // Clear the container
  // Add filtered items to the container
    // Filter for available items only
      // Show no results message
    // Show no results message
/**
 * Show item details
 * @param {Object} item - Composio marketplace item
 */
  // Import the details module dynamically to avoid circular dependencies

=== ./js/features/composio-marketplace/existing-connections-handler.js ===
/**
 * Existing Connections Handler Module
 * Handles existing connections UI and logic
 */
/**
 * Create existing connections container
 * @param {HTMLElement} detailsContainer - The details container
 * @param {Object} item - Composio marketplace item
 */
/**
 * Show existing connections
 * @param {Array} connections - Array of existing connections
 * @param {Object} item - Composio marketplace item
 */
/**
 * Delete all connections and then connect
 * @param {Object} item - Composio marketplace item
 */
/**
 * Proceed with connection (skip existing check)
 * @param {Object} item - Composio marketplace item
 */
    // Import connection flow handler to handle the response

=== ./js/features/composio-marketplace/details.js ===
/**
 * Composio Marketplace Details Module
 * Handles item details view
 */
// Current item being viewed
/**
 * Set current item
 * @param {Object} item - Composio marketplace item
 */
/**
 * Get current item
 * @returns {Object} - Current Composio marketplace item
 */
/**
 * Show item details
 * @param {Object} item - Composio marketplace item
 */
  // Hide items view, show details view
  // Get the details container
  // Populate details
  // Add connect button event listener
  // Create containers
/**
 * Connect to a Composio app
 * @param {Object} item - Composio marketplace item
 */
    // Show loading state
    // Hide any previously shown containers
    // Check for existing connections first
      // Show existing connections
      // Reset button
    // No existing connections, proceed with normal flow
    // Connect to the app (skip existing check since we already did it)
    // Handle connection response
    // Reset button
    // Reset button

=== ./js/features/composio-marketplace/search.js ===
/**
 * Composio Marketplace Search Module
 * Handles search functionality for Composio marketplace
 */
/**
 * Initialize search functionality
 * @param {Array} allItems - All marketplace items
 * @param {HTMLElement} itemsContainer - The items container element
 * @param {Function} showSearchResults - Function to show search results
 */
  // Search input
  // Add input event listener
  // Add a blur event to ensure search is properly applied when focus is lost
    // Re-apply the current search to ensure consistent state
/**
 * Handle search input
 * @param {string} query - Search query
 * @param {Array} allItems - All marketplace items (initial value, may be stale)
 * @param {HTMLElement} itemsContainer - The items container element
 * @param {Function} showSearchResults - Function to show search results
 */
  // Always use the latest items from the items module
  // For Composio marketplace, we always filter items directly (no categories view)
/**
 * Reset search input
 */
/**
 * Update search placeholder
 * @param {string} placeholder - New placeholder text
 */
/**
 * Get current search query
 * @returns {string} - Current search query
 */

=== ./js/features/composio-marketplace/modal.js ===
/**
 * Composio Marketplace Modal Module
 * Handles the creation and setup of the Composio marketplace modal
 */
// DOM element references
/**
 * Create the Composio marketplace modal
 * @returns {Object} - References to DOM elements
 */
  // Create modal element if it doesn't exist
    // Append modal to body
  // Cache DOM elements
  // Debug: Log CSS properties to verify scrolling is enabled
/**
 * Show the Composio marketplace modal
 * @param {HTMLElement} modal - The modal element
 */
  // Check if API key exists
    // Show API key form
    // Show marketplace content
/**
 * Show the API key form
 */
  // Hide marketplace content
  // Show API key form
  // Set up form submission handler
  // Set up clear button handler
  // Pre-fill API key if it exists
/**
 * Handle clearing the API key
 */
  // Clear API key from storage
  // Clear input field
  // Hide clear button
  // Show success message
/**
 * Show the marketplace content
 */
  // Hide API key form
  // Show marketplace content
/**
 * Handle API key form submission
 * @param {Event} e - Form submission event
 */
  // Get API key
  // Save API key to storage
  // Show marketplace content
  // Reload marketplace data
/**
 * Close the Composio marketplace modal
 */
/**
 * Show all apps directly
 */
  // Reset search input
  // Hide any "no results" message
/**
 * Show the items view (now the main view)
 */
/**
 * Show the details view
 */

=== ./js/features/quick-add/ui.js ===
/**
 * Quick Add UI Module
 * Handles template rendering and UI interactions
 */
/**
 * Initialize the UI module
 * @param {Object} baseModule - The base module instance
 */
/**
 * Populate the template list
 * @param {Object} baseModule - The base module instance
 * @param {Object} templates - The templates object
 * @param {string} searchQuery - Optional search query to filter templates
 */
  // Filter templates based on search query if provided
  // Check if we have any templates after filtering
  // Get all templates from the filtered templates object
/**
 * Filter templates based on search query
 * @param {Object} templates - The templates object
 * @param {string} query - The search query
 * @returns {Object} - Filtered templates
 */
    // Search in name, description, and category
/**
 * Show a message when no templates match the search query
 * @param {string} query - The search query
 */
  // Add event listener to clear search button
    // Dispatch event to clear search
/**
 * Create a template card
 * @param {string} id - The template ID
 * @param {Object} template - The template object
 * @param {string} searchQuery - The search query for highlighting
 * @returns {HTMLElement} - The template card element
 */
  // Check if template has an icon
  // Highlight matching text if search query is provided
    // Dispatch custom event for template selection
/**
 * Escape special characters in a string for use in a regular expression
 * @param {string} string - The string to escape
 * @returns {string} - The escaped string
 */

=== ./js/features/quick-add/form-submission.js ===
/**
 * Quick Add Form Submission Module
 * Handles form submission logic
 */
/**
 * Handle form submission
 * @param {Event} e - The submit event
 * @param {Object} baseModule - The base module instance
 */
  // Get all input values
        // For checkboxes, use the checked property
        // For file inputs, use the file path
        // For all other inputs, use the value
  // Check if any required fields are missing
      // Special case for directory-list type
        // Get all directory inputs
        // Check if at least one directory is selected
      // Special case for actor-list type
        // Get all actor inputs
        // Check if at least one actor is selected
  // Create the server configuration
  // Special case for filesystem-server: collect directories
    // Get all directory inputs
    // Check if at least one directory is selected
    // Add directories to args
  // Special case for apify-web-adapter: collect actors
    // Get all actor inputs
    // Check if at least one actor is selected
    // Join actors with commas and replace the {actorIds} placeholder
    // Replace template variables in args
          // Replace all {variable} with actual values
    // Replace template variables in args
          // Replace all {variable} with actual values
  // Replace template variables in env
  // Check if server should be active or inactive
  // Add server to configuration

=== ./js/features/quick-add/form-fields.js ===
/**
 * Quick Add Form Fields Module
 * Handles form field generation
 */
/**
 * Add a template input field
 * @param {Object} input - The input configuration
 * @param {HTMLElement} container - The container to add the input to
 */
    // Create a directory list input
    // Initialize directory functionality
    // Create an actor list input
    // Initialize actor functionality
    // Create a select dropdown
    // Create a checkbox input
    // Create a file input for paths
    // Create a number input
    // Create a URL input
    // Create a password input
    // Create a text input (default)

=== ./js/features/quick-add/actor.js ===
/**
 * Quick Add Actor Module
 * Handles actor list functionality for the Quick Add wizard
 */
/**
 * Initialize the actor module
 */
  // Add initial actor row
  // Set up add button
/**
 * Add an actor row to the container
 * @param {string} actor - Actor ID
 */
  // Set up event listeners
  // Remove button
  // Info button
  // Input field focus/blur
  // Input field change
/**
 * Get all actor IDs from the actor list
 * @returns {string[]} - Array of actor IDs
 */

=== ./js/features/quick-add/directory.js ===
/**
 * Quick Add Directory Module
 * Handles directory selection functionality
 */
/**
 * Initialize the directory module
 */
  // Add the first directory row
  // Set up event listener for the add directory button
/**
 * Add a directory input row
 */
  // Set up event listeners for the browse and remove buttons
/**
 * Get all selected directories
 * @returns {Array} - Array of selected directories
 */

=== ./js/features/quick-add/base.js ===
/**
 * Quick Add Base Module
 * Core initialization and coordination for the Quick Add feature
 */
  // Initialize the component after DOM elements are available
    // DOM elements
    // Initialize modules
    // Initialize event listeners
  // Initialize event listeners
    // Custom events
  // Open the Quick Add modal
    // Focus search input
  // Close the Quick Add modal
  // Show template selection view
    // Reset search when going back to template selection
  // Select a template
    // Update template info
    // Documentation links are now handled by the template handlers
    // Generate a default name based on the template ID
    // Generate form fields
    // Show the template configuration view
  // Get all templates
  // Add server to configuration
    // Add server to configuration
    // Save configuration
    // Show restart warning
    // Close modal
// Create and export a singleton instance

=== ./js/features/quick-add/form.js ===
/**
 * Quick Add Form Module
 * Handles form generation, validation, and submission
 */
/**
 * Initialize the form module
 * @param {Object} baseModule - The base module instance
 */
  // Initialize event listeners
/**
 * Toggle advanced options
 */
/**
 * Generate form fields for a template
 * @param {Object} baseModule - The base module instance
 * @param {Object} template - The template object
 */
  // Clear previous inputs
  // Add documentation link if available
  // Generate form fields for required inputs
/**
 * Export the handleSubmit function
 */

=== ./js/features/quick-add/search.js ===
/**
 * Quick Add Search Module
 * Handles search input, filtering, and highlighting
 */
/**
 * Initialize the search module
 * @param {Object} baseModule - The base module instance
 */
  // Create search container if it doesn't exist
  // Initialize event listeners
/**
 * Create the search container and input
 */
  // Check if search container already exists
  // Create search container
  // Create search input
  // Insert search container before template list
  // Get search input
/**
 * Initialize event listeners
 */
  // Search input event
  // Clear button event
  // Listen for custom clear search event
  // Add keyboard shortcut (Escape to clear search)
/**
 * Handle search input
 */
  // Show/hide clear button
  // Update template list
/**
 * Clear search
 */
  // Update template list
/**
 * Reset search
 */
/**
 * Focus search input
 */

=== ./js/features/server-list-enhancements/ui/controls.js ===
/**
 * @file controls.js
 * @description UI controls and stats functionality
 */
  /**
   * Create enhanced header with search and filters
   */
  /**
   * Create pagination controls
   */
  /**
   * Update statistics display
   */
  /**
   * Update pagination controls
   */
  /**
   * Update bulk actions visibility and state
   */
    // Update select all button
  /**
   * Toggle select all checkboxes
   */

=== ./js/features/server-list-enhancements/ui/table.js ===
/**
 * @file table.js
 * @description Table rendering functionality
 */
  /**
   * Create a server row element
   */
    // Always use compact view
  /**
   * Render server list in table
   */
    // Clear current list
    // Render grouped servers
        // Add group header
      // Add paginated servers for this group
    // Wire event handlers for new rows
  /**
   * Get source badge for a server
   * @param {Object} server - Server configuration
   * @returns {string} HTML for source badge
   */
  /**
   * Create enhanced table
   */
    // Create enhanced table
    // Replace basic table with enhanced table

=== ./js/features/server-list-enhancements/events.js ===
/**
 * @file events.js
 * @description Event handling for server list enhancements
 */
  /**
   * Wire up event handlers for enhanced functionality
   */
    // Check if elements exist before adding listeners
    // Search
    // Filters
      // Update button appearance
    // Sorting
    // Grouping
    // View mode (skip if elements don't exist)
    // Pagination
    // Bulk actions
  /**
   * Wire event handlers for server rows
   */
    // Favorite toggles
    // Edit buttons
    // Delete buttons
    // Toggle status buttons
    // Checkbox selection
  /**
   * Bulk activate selected servers
   */
  /**
   * Bulk deactivate selected servers
   */
  /**
   * Bulk delete selected servers
   */
  /**
   * Register event listeners
   */
  /**
   * Trigger an event
   */

=== ./js/features/server-list-enhancements/ui.js ===
/**
 * @file ui.js
 * @description Main UI coordination for server list enhancements
 */
  /**
   * Set events handler
   */
  /**
   * Create the enhanced UI elements
   */
    // Check if enhanced UI already exists
    // Create and append enhanced header
    // Create and insert pagination
    // Create enhanced table
  /**
   * Wire up event handlers for enhanced functionality
   */
  /**
   * Set view mode (detailed or compact)
   */
  /**
   * Refresh the enhanced server list
   */
    // Update stats
    // Render table
    // Update pagination
  /**
   * Update bulk actions visibility and state
   */
  /**
   * Toggle select all checkboxes
   */

=== ./js/features/server-list-enhancements/core.js ===
/**
 * @file core.js
 * @description Core data operations for server list enhancements
 */
  /**
   * Get all servers with enhanced data
   */
    // Add active servers
    // Add inactive servers
  /**
   * Filter servers based on current filters
   */
      // Search filter
      // If favorites filter is on, ignore status filter and show all favorite servers
        // Still apply category filter if needed
      // Status filter (only applied when favorites filter is off)
      // Category filter
  /**
   * Sort servers based on current sort settings
   */
  /**
   * Group servers based on current grouping setting
   */
  /**
   * Get paginated servers
   */
  /**
   * Get total number of pages
   */
  /**
   * Get server category based on name and config
   */
  /**
   * Truncate command for compact view
   */
  /**
   * Get list of selected server names
   */

=== ./js/features/server-list-enhancements/storage.js ===
/**
 * @file storage.js
 * @description LocalStorage operations for server list enhancements
 */
  /**
   * Load favorites from localStorage
   */
  /**
   * Save favorites to localStorage
   */
  /**
   * Load categories from localStorage
   */
  /**
   * Save categories to localStorage
   */
  /**
   * Load last used timestamps from localStorage
   */
  /**
   * Save last used timestamps to localStorage
   */
  /**
   * Toggle favorite status for a server
   */
  /**
   * Update last used timestamp for a server
   */
  /**
   * Check if server is favorite
   */
  /**
   * Get last used timestamp for server
   */

=== ./js/features/smithery-marketplace/smithery-config.js ===
/**
 * Smithery Config Generator
 * Generates MCP server configurations for different connection types
 */
/**
 * Generate HTTP configuration using @smithery/cli
 * @param {Object} server - Server details from API
 * @param {Object} credentials - Credentials object with apiKey and profile
 * @returns {Object} MCP server configuration
 */
/**
 * Generate stdio configuration by evaluating stdioFunction
 * @param {Object} server - Server details from API
 * @param {Object} userConfig - User-provided configuration parameters
 * @returns {Object} MCP server configuration
 */
    // Safely evaluate the stdioFunction with user config
/**
 * Get default connection type for a server (prefer HTTP)
 * @param {Object} server - Server details from API
 * @returns {string} Connection type ('http' or 'stdio')
 */

=== ./js/features/smithery-marketplace/ui.js ===
/**
 * Smithery Marketplace UI Module
 * Handles rendering the Smithery marketplace UI
 */
// Import modular components
// DOM element references
/**
 * Initialize the Smithery marketplace UI
 */
  // Create modal and get DOM references
  // Store DOM references
  // Set up event listeners
/**
 * Set up event listeners
 */
  // Close button
  // Back to items button
  // Back to marketplace button (from details view)
  // API Key Settings button
  // Filter checkbox
/**
 * Show the items view
 */
/**
 * Populate the Smithery marketplace with items
 * @param {Array} items - Smithery marketplace items
 */
  // Store all items for later use
  // Display all items directly
/**
 * Open the Smithery marketplace modal
 * @param {Array} items - Smithery marketplace items
 */
  // Populate marketplace with items directly
  // Get all items after they've been stored
  // Initialize search functionality with the populated items
  // Show items view directly
  // Show modal

=== ./js/features/smithery-marketplace/smithery-service.js ===
/**
 * Smithery Service - API Credentials & Basic Fetch
 * Handles API key storage and basic fetch wrapper
 */
/**
 * Initialize Smithery service with credentials
 * @param {string} apiKey - Smithery API key
 * @param {string} profile - Smithery profile name
 */
/**
 * Get current credentials from storage
 * @returns {Promise<Object|null>} Current credentials or null if not found
 */
/**
 * Check if service is initialized
 * @returns {boolean} True if initialized
 */
/**
 * Basic fetch wrapper with authentication
 * @param {string} url - API endpoint URL
 * @param {Object} options - Fetch options
 * @returns {Promise<Response>} Fetch response
 */
    // Try to get credentials from storage

=== ./js/features/smithery-marketplace/index.js ===
/**
 * Smithery Marketplace Module
 * Main entry point for the Smithery marketplace feature
 */
/**
 * Initialize the Smithery marketplace module
 */
  // Initialize UI
/**
 * Open the Smithery marketplace modal
 */
    // Load Smithery servers data
    // Force all items to have "Smithery Servers" category
    // Open the marketplace modal
/**
 * Load Smithery servers from API
 * @returns {Promise<Array>} Array of server items
 */
  // Import service module to check credentials first
    // Check if credentials exist first
    // Initialize service with credentials
    // Import API module and load servers
    // Return empty array instead of throwing - let modal handle the error
// Create and export a singleton instance

=== ./js/features/smithery-marketplace/smithery-details-renderer.js ===
/**
 * Smithery Details Renderer
 * Handles HTML rendering for server details
 */
/**
 * Render server details content
 * @param {Object} server - Server details from API
 * @returns {string} HTML content
 */
/**
 * Render stdio configuration parameters
 * @param {Object} server - Server details
 */
/**
 * Escape HTML to prevent XSS
 * @param {string} text - Text to escape
 * @returns {string} Escaped text
 */

=== ./js/features/smithery-marketplace/smithery-api.js ===
/**
 * Smithery API - Server Listing & Details
 * Handles API calls to Smithery registry
 */
/**
 * List servers from Smithery registry
 * @param {Object} options - Query options
 * @param {number} options.page - Page number (default: 1)
 * @param {number} options.pageSize - Page size (default: 100)
 * @param {string} options.q - Search query
 * @returns {Promise<Object>} Server list with pagination
 */
/**
 * Get detailed server information
 * @param {string} qualifiedName - Server qualified name (e.g., "@jlia0/servers")
 * @returns {Promise<Object>} Server details including connections and tools
 */
/**
 * Search servers with real-time query
 * @param {string} query - Search query
 * @param {number} pageSize - Number of results (default: 20)
 * @returns {Promise<Object>} Search results
 */
/**
 * Validate credentials by making a test API call
 * @returns {Promise<boolean>} True if credentials are valid
 */

=== ./js/features/smithery-marketplace/items.js ===
/**
 * Smithery Marketplace Items Module
 * Handles rendering and managing marketplace items
 */
/**
 * Set all items for the marketplace
 * @param {Array} items - Array of marketplace items
 */
/**
 * Get all items
 * @returns {Array} All marketplace items
 */
/**
 * Show all items in the marketplace
 */
/**
 * Set filter for installed servers
 * @param {boolean} showInstalled - Whether to show only installed servers
 */
/**
 * Apply current filters to the items
 */
/**
 * Show search results
 * @param {Array} items - Filtered items to display
 */
/**
 * Render items in the container
 * @param {Array} items - Items to render
 * @param {HTMLElement} container - Container element
 */
/**
 * Create an item element
 * @param {Object} item - Item data
 * @returns {HTMLElement} Item element
 */
  // Add event listeners
/**
 * Show item details
 * @param {Object} item - Item to show details for
 */
    // Import details module dynamically
/**
 * Quick install item
 * @param {Object} item - Item to install
 */
    // Import connector module dynamically
    // Generate unique name
    // Install with default settings
/**
 * Escape HTML to prevent XSS
 * @param {string} text - Text to escape
 * @returns {string} Escaped text
 */

=== ./js/features/smithery-marketplace/smithery-details.js ===
/**
 * Smithery Details - Server Details Modal & Installation Flow
 * Handles server details display and installation process
 */
/**
 * Show server details modal
 * @param {string} qualifiedName - Server qualified name
 * @param {Object} originalItem - Original item from list (optional, contains description)
 */
    // Show loading state
    // Fetch server details
    // Merge original item description if available
    // Render details
/**
 * Set up event listeners for details modal
 * @param {Object} server - Server details
 */
  // Connection type change
  // Install button
  // Close button
  // Collapsible sections
  // Initialize with default connection type
/**
 * Handle connection type change
 * @param {Object} server - Server details
 * @param {string} connectionType - Selected connection type
 */
/**
 * Handle server installation
 * @param {Object} server - Server details
 */
    // Show loading state
    // Reset button state
/**
 * Collect stdio parameters from form
 * @returns {Object} User configuration
 */
/**
 * Show details modal
 * @param {string} title - Modal title
 * @param {string} content - Modal content HTML
 * @param {Object} server - Server object (optional, for event listeners)
 */
  // Hide items view, show details view (same pattern as Composio)
  // Get the details container
  // Set the content
  // Set up event listeners after DOM is updated (only if server is provided)
    // Use setTimeout to ensure DOM is fully updated
      // Check if buttons exist
/**
 * Close details modal
 */
  // Show items view, hide details view (same pattern as Composio)
/**
 * Toggle collapsible section
 * @param {HTMLElement} header - The header element that was clicked
 */
/**
 * Escape HTML to prevent XSS
 * @param {string} text - Text to escape
 * @returns {string} Escaped text
 */

=== ./js/features/smithery-marketplace/search.js ===
/**
 * Smithery Marketplace Search Module
 * Handles search functionality for the marketplace
 */
/**
 * Initialize search functionality
 * @param {Array} items - All items to search through
 * @param {HTMLElement} container - Container to show results in
 * @param {Function} callback - Callback to show search results
 */
  // Get search input
    // Remove existing listeners
    // Add search listener
/**
 * Handle search input
 * @param {Event} event - Input event
 */
  // Clear previous timeout
  // Debounce search
/**
 * Perform search
 * @param {string} query - Search query
 */
    // Show all items if query is empty
  // Filter items based on query
  // Show filtered results
/**
 * Clear search
 */

=== ./js/features/smithery-marketplace/modal.js ===
/**
 * Smithery Marketplace Modal Module
 * Handles the creation and setup of the Smithery marketplace modal
 */
// DOM element references
/**
 * Create the Smithery marketplace modal
 * @returns {Object} - References to DOM elements
 */
  // Create modal element if it doesn't exist
    // Append modal to body
  // Cache DOM elements
/**
 * Show the Smithery marketplace modal
 * @param {HTMLElement} modal - The modal element
 */
  // Check if API key exists
    // Show API key form
    // Show marketplace content
/**
 * Show the API key form
 */
  // Hide marketplace content
  // Show API key form
  // Set up form submission handler
  // Set up clear button handler
  // Pre-fill credentials if they exist
/**
 * Handle clearing the credentials
 */
  // Clear credentials from storage
  // Clear input fields
  // Hide clear button
  // Show success message
/**
 * Show the marketplace content
 */
  // Hide API key form
  // Show marketplace content
/**
 * Handle API key form submission
 * @param {Event} e - Form submission event
 */
  // Get credentials
  // Save credentials to storage
  // Show marketplace content
  // Reload marketplace data
/**
 * Close the Smithery marketplace modal
 */
/**
 * Show the items view
 */
/**
 * Show the details view
 */

=== ./js/features/smithery-marketplace/smithery-connector.js ===
/**
 * Smithery Connector - Installation Logic
 * Handles server installation and config management integration
 */
/**
 * Install a Smithery server with HTTP connection (default)
 * @param {string} serverName - Name for the MCP server
 * @param {Object} server - Server details from API
 * @returns {Promise<boolean>} Success status
 */
    // Get credentials
    // Add Smithery metadata
    // Add server to configuration
/**
 * Install a Smithery server with stdio connection
 * @param {string} serverName - Name for the MCP server
 * @param {Object} server - Server details from API
 * @param {Object} userConfig - User-provided configuration parameters
 * @returns {Promise<boolean>} Success status
 */
    // Add Smithery metadata
    // Add server to configuration
/**
 * Install a server using the default connection type
 * @param {string} serverName - Name for the MCP server
 * @param {Object} server - Server details from API
 * @param {Object} userConfig - User-provided configuration (for stdio)
 * @returns {Promise<boolean>} Success status
 */
/**
 * Check if a server name already exists in configuration
 * @param {string} serverName - Server name to check
 * @returns {boolean} True if name exists
 */
/**
 * Check if a Smithery server is already installed
 * @param {string} qualifiedName - Server qualified name
 * @returns {boolean} True if server is installed
 */
/**
 * Get all installed Smithery servers
 * @returns {Array} Array of installed Smithery server qualified names
 */
/**
 * Generate a unique server name based on qualified name
 * @param {string} qualifiedName - Server qualified name
 * @returns {string} Unique server name
 */
  // Extract name from qualified name (e.g., "@jlia0/servers" -> "servers")
  // Add suffix if name is taken

=== ./js/features/apify-marketplace/ui.js ===
/**
 * Apify Marketplace UI Module
 * Handles rendering the Apify marketplace UI
 */
// Import modular components
// DOM element references
/**
 * Initialize the Apify marketplace UI
 */
  // Create modal and get DOM references
  // Store DOM references
  // Set up event listeners
/**
 * Set up event listeners
 */
  // Close button
  // Back to items button
  // API Key Settings button
/**
 * Show the items view
 */
/**
 * Populate the Apify marketplace with items
 * @param {Array} items - Apify marketplace items
 */
  // Store all items for later use
  // Display all items directly
/**
 * Open the Apify marketplace modal
 * @param {Array} items - Apify marketplace items
 */
  // Populate marketplace with items directly
  // Get all items after they've been stored
  // Initialize search functionality with the populated items
  // Show items view directly
  // Show modal

=== ./js/features/apify-marketplace/index.js ===
/**
 * Apify Marketplace Module
 * Main entry point for the Apify actors marketplace feature
 */
/**
 * Initialize the Apify marketplace module
 */
  // Initialize UI
/**
 * Open the Apify marketplace modal
 */
    // Load Apify actors data
    // Force all items to have "Apify Actors" category
    // Open the marketplace modal
// Create and export a singleton instance

=== ./js/features/apify-marketplace/data.js ===
/**
 * WARNING: CREATING DEMO/DUMMY DATA WITHOUT EXPLICIT USER CONSENT IS FRAUD AND AGAINST THE LAW.
 * ANY IMPLEMENTATION OF DEMO DATA GENERATION WITHOUT USER PERMISSION IS STRICTLY PROHIBITED.
 * VIOLATORS MAY BE SUBJECT TO LEGAL ACTION.
 */
/**
 * Apify Marketplace Data Module
 * Handles loading and parsing Apify actors data
 */
/**
 * Load Apify actors data from the API and cache it
 * @returns {Promise<Array>} - Array of Apify actors
 */
  // Check cache first
  // If cache exists and is less than 24 hours old
  // Fetch fresh data
    // Get API key from storage
    // If no API key is set, return empty array
    // Fetch actors from Apify Store API
          // Invalid API key
          // Import the modal module to show the API key form
      // If no actors found, return empty array
      // Transform actors to match marketplace item format
        // Create proper actor identifier: username/name
          // Keep original ID for reference
      // Cache the data
/**
 * Get currently selected actors from server configuration
 * @returns {Promise<Array>} - Array of selected actor identifiers
 */
    // Find the --actors argument
/**
 * Check if an actor is currently selected
 * @param {string} actorId - Actor identifier to check
 * @returns {Promise<boolean>} - True if actor is selected
 */

=== ./js/features/apify-marketplace/items.js ===
/**
 * Apify Marketplace Items Module
 * Handles item listing and filtering
 */
// State variables
/**
 * Set all items
 * @param {Array} items - All Apify marketplace items
 */
  // Force all items to have available flag set to true
  // Load selected actors from configuration
/**
 * Get all items
 * @returns {Array} - All Apify marketplace items
 */
/**
 * Load selected actors from server configuration
 */
/**
 * Create an item element
 * @param {Object} item - Apify marketplace item
 * @param {boolean} showCategory - Whether to show the category label
 * @returns {HTMLElement} - Item element wrapper
 */
  // Create wrapper for consistent sizing
  // Create the actual item element
  // Create item content
  // Add click event for the item (show details)
    // Add/Remove button
  // Add the item to the wrapper
/**
 * Show all items
 */
  // Get the items container
  // Clear items container
  // Filter for available items only
  // Create items
    // Show no items message
/**
 * Filter items based on search query
 * @param {string} query - Search query
 */
  // Normalize query
  // Get the items container
  // If query is empty, show all items
  // Filter items based on query
  // Clear the container
  // Add filtered items to the container
    // Filter for available items only
      // Show no results message
    // Show no results message
/**
 * Toggle actor selection
 * @param {string} actorId - Actor ID to toggle
 * @param {HTMLElement} button - Button element
 */
      // Update the UI
      // Show success message
    // Reset button text
/**
 * Update the UI for a specific item
 * @param {string} actorId - Actor ID to update
 */
/**
 * Show item details
 * @param {Object} item - Apify marketplace item
 */
  // Import the details module dynamically to avoid circular dependencies
/**
 * Check if an actor is selected
 * @param {string} actorId - Actor ID to check
 * @returns {boolean} - True if selected
 */
/**
 * Get all selected actors
 * @returns {Array} - Array of selected actor IDs
 */

=== ./js/features/apify-marketplace/details.js ===
/**
 * Apify Marketplace Details Module
 * Handles actor detail view
 */
/**
 * Show details for an actor
 * @param {Object} item - Actor item to show details for
 */
  // Populate details content
  // Show details view
/**
 * Populate the details content
 * @param {Object} item - Actor item
 */
  // Check if actor is currently selected
  // Add event listener to the toggle button
/**
 * Create stats section HTML
 * @param {Object} stats - Actor stats
 * @returns {string} - HTML string
 */
/**
 * Create categories section HTML
 * @param {Array} categories - Actor categories
 * @returns {string} - HTML string
 */
/**
 * Create pricing section HTML
 * @param {Object} pricing - Actor pricing information
 * @returns {string} - HTML string
 */
/**
 * Toggle actor from details view
 * @param {string} actorId - Actor ID to toggle
 * @param {HTMLElement} button - Button element
 */
      // Update button state
      // Show success message
      // Update the main items view if visible
      // Reset button text
    // Reset button text
/**
 * Escape HTML to prevent XSS
 * @param {string} text - Text to escape
 * @returns {string} - Escaped text
 */

=== ./js/features/apify-marketplace/search.js ===
/**
 * Apify Marketplace Search Module
 * Handles search functionality for Apify marketplace
 */
/**
 * Initialize search functionality
 * @param {Array} allItems - All marketplace items
 * @param {HTMLElement} itemsContainer - The items container element
 * @param {Function} showSearchResults - Function to show search results
 */
  // Search input
  // Add input event listener
  // Add a blur event to ensure search is properly applied when focus is lost
    // Re-apply the current search to ensure consistent state
/**
 * Handle search input
 * @param {string} query - Search query
 * @param {Array} allItems - All marketplace items (initial value, may be stale)
 * @param {HTMLElement} itemsContainer - The items container element
 * @param {Function} showSearchResults - Function to show search results
 */
  // Always use the latest items from the items module
  // For Apify marketplace, we always filter items directly (no categories view)
/**
 * Reset search input
 */
/**
 * Update search placeholder
 * @param {string} placeholder - New placeholder text
 */
/**
 * Get current search query
 * @returns {string} - Current search query
 */

=== ./js/features/apify-marketplace/modal.js ===
/**
 * Apify Marketplace Modal Module
 * Handles the creation and setup of the Apify marketplace modal
 */
// DOM element references
/**
 * Create the Apify marketplace modal
 * @returns {Object} - References to DOM elements
 */
  // Create modal element if it doesn't exist
    // Append modal to body
  // Cache DOM elements
/**
 * Show the Apify marketplace modal
 * @param {HTMLElement} modal - The modal element
 */
  // Check if API key exists
    // Show API key form
    // Show marketplace content
/**
 * Show the API key form
 */
  // Hide marketplace content
  // Show API key form
  // Set up form submission handler
  // Set up clear button handler
  // Set up settings button handler
  // Pre-fill API key if it exists
/**
 * Handle clearing the API key
 */
  // Clear API key from storage
  // Clear input field
  // Hide clear button
  // Show success message
/**
 * Show the marketplace content
 */
  // Hide API key form
  // Show marketplace content
/**
 * Handle API key form submission
 * @param {Event} e - Form submission event
 */
  // Get API key
  // Save API key to storage
  // Show marketplace content
  // Reload marketplace data
/**
 * Close the Apify marketplace modal
 */
/**
 * Show all actors directly
 */
  // Reset search input
  // Hide any "no results" message
/**
 * Show the items view (now the main view)
 */
/**
 * Show the details view
 */

=== ./js/features/apify-marketplace/connector.js ===
/**
 * Apify Marketplace Connector Module
 * Handles server configuration management for Apify actors
 */
/**
 * Add an actor to the Apify server configuration
 * @param {string} actorId - Actor identifier (username/name format) to add
 * @returns {Promise<boolean>} - True if successful
 */
    // Get current configuration
    // Get API key
    // Initialize server if it doesn't exist
      // Add to existing actors list
        // No --actors argument exists, add it
        // --actors exists but no value, add the actor
        // --actors exists with value, append to it
          // Update apify metadata
      // Update API key in env
    // Save configuration
    // Show success notification and refresh server list
/**
 * Remove an actor from the Apify server configuration
 * @param {string} actorId - Actor identifier (username/name format) to remove
 * @returns {Promise<boolean>} - True if successful
 */
    // Get current configuration
    // Remove the actor from the list
      // No actors left, remove the entire server
      // Update the actors list
    // Save configuration
    // Show success notification and refresh server list
/**
 * Get all currently configured actors
 * @returns {Promise<Array>} - Array of actor identifiers
 */
/**
 * Check if an actor is currently configured
 * @param {string} actorId - Actor identifier to check
 * @returns {Promise<boolean>} - True if actor is configured
 */
/**
 * Update the API key in the server configuration
 * @param {string} apiKey - New API key
 * @returns {Promise<boolean>} - True if successful
 */
/**
 * Show success notification and refresh server list (like Composio does)
 * @param {string} message - Success message to show
 */
    // Import notifications module
    // Show success notification
    // Show restart warning (same as Composio)
    // Refresh server list to show changes
    // Close modal after a short delay (like Composio does)

=== ./js/features/apify-marketplace/storage.js ===
/**
 * Apify Marketplace Storage Module
 * Handles API key storage and cache management
 */
/**
 * Get the stored Apify API key
 * @returns {Promise<string>} - The API key or empty string
 */
/**
 * Set the Apify API key
 * @param {string} apiKey - The API key to store
 * @returns {Promise<boolean>} - True if successful
 */
/**
 * Get cached actors data
 * @returns {Promise<Object|null>} - Cached data with timestamp or null
 */
/**
 * Set cached actors data
 * @param {Object} cacheData - Data to cache with timestamp
 * @returns {Promise<boolean>} - True if successful
 */
/**
 * Clear cached actors data
 * @returns {Promise<boolean>} - True if successful
 */

=== ./js/utils/url-parser.js ===
/**
 * URL Parser Module
 * Handles parsing and extracting MCP server configurations from various sources
 */
/**
 * Parse URL response and extract MCP server configuration
 * @param {string} url - The URL
 * @param {string} response - The response text
 * @returns {object|null} - The parsed configuration or null
 */
  // Extract all possible JSON blocks from the response
  // First, try to find NPX configurations specifically
    // Check if this block contains an NPX configuration
  // If no NPX configurations found, try each JSON block normally
  // (but still filter out Docker configurations)
/**
 * Parse a JSON block
 * @param {string} url - The URL
 * @param {string} jsonBlock - The JSON block to parse
 * @returns {object|null} - The parsed configuration or null
 */
    // Check if it's a valid MCP server configuration
      // Get the first server
        // Only accept NPX configurations
    // Check if it's a VSCode-style configuration (mcp.servers)
      // Get the first server
        // Only accept NPX configurations
    // Check if it's a direct server configuration
      // Only accept NPX configurations
    // Ignore parsing errors for individual blocks
/**
 * Extract all possible JSON blocks from text
 * @param {string} text - The text to extract JSON blocks from
 * @returns {string[]} - Array of potential JSON blocks
 */
  // Try different extraction methods
  // 1. Extract code blocks with ```json (Markdown)
  // 2. Extract <pre> or <code> blocks (HTML)
  // 3. Extract any JSON-like structures with braces
/**
 * Extract Markdown code blocks
 * @param {string} text - The text to extract from
 * @param {string[]} blocks - Array to add blocks to
 */
  // Match code blocks with ```json
  // Also match code blocks with indentation (4 spaces or tab)
      // Remove the indentation
/**
 * Extract HTML code blocks
 * @param {string} text - The text to extract from
 * @param {string[]} blocks - Array to add blocks to
 */
  // Match <pre> blocks
  // Match <code> blocks
/**
 * Extract JSON structures with braces
 * @param {string} text - The text to extract from
 * @param {string[]} blocks - Array to add blocks to
 */
  // Find all potential JSON objects (starting with { and ending with })
  // This is a simple approach and might not work for all cases
/**
 * Generate a name from a URL
 * @param {string} url - The URL
 * @returns {string} - The generated name
 */
    // GitHub repo
    // Gist
    // Default: use hostname
    // Fallback

=== ./js/utils/element-debugger.js ===
/**
 * @file element-debugger.js
 * @description Lightweight element selector for debugging UI issues
 */
    // Listen for F12 to toggle debug mode
    // Handle element clicks in debug mode
    // Add hover effect in debug mode
    // Generate element info
    // Copy to clipboard
    // Flash the element
    // Turn off debug mode
    // Generate CSS selector
      // Fallback for older browsers
    // Remove existing notification
    // Create notification
    // Auto-remove after 3 seconds
// Initialize the debugger

=== ./js/utils/modal-loader.js ===
/**
 * Modal Loader
 * Dynamically loads modal HTML files into the main document
 */
  /**
   * Load all modal HTML files
   */
        // Create a temporary container to parse the HTML
        // Append the modal to the document body
// Create and export a singleton instance

=== ./js/utils/debug-ids.js ===
/**
 * Debug ID Utility
 * Adds small, copyable debug IDs to windows and dialogs for debugging
 */
  /**
   * Add CSS styles for debug IDs
   */
  /**
   * Add debug ID to an element
   * @param {HTMLElement} element - The element to add debug ID to
   * @param {string} id - The debug ID string
   */
    // Remove existing debug ID if present
    // Create debug ID element
    // Add click handler to copy ID
    // Add to element
  /**
   * Copy text to clipboard
   * @param {string} text - Text to copy
   * @param {HTMLElement} element - Element to show feedback on
   */
      // Show feedback
      // Fallback for older browsers
      // Show feedback
// Create and export singleton instance

=== ./js/main.js ===
/**
 * MCP Studio Main
 * Entry point for the application
 */
// Import modules
// Make global objects available
// DOM elements
// Initialize application
    // Load modal HTML files first
    // Initialize UI components
    // Initialize enhanced server list after basic components
    // Initialize Quick Add after modals are loaded
    // Register event handlers
    // Set up event listeners
    // Sidebar toggle
    // Load configuration
    // Refresh server list
    // Hide basic table and show enhanced view by default
    // Refresh enhanced list after all initialization is complete
    // Show add server dialog if no servers are configured
// Initialize when DOM is loaded

=== ./js/quick-add-templates.js ===
/**
 * Quick Add Templates
 * Defines templates for quickly adding pre-configured MCP servers
 */
        // Directories will be added dynamically
// Export the templates

=== ./debugging/capture-logs.js ===
        // Find the main target (usually the first one or the one with the app URL)
            // Enable Runtime domain to receive console messages
            // Enable Console domain
            // Get existing console messages
        // Keep the script running for 10 seconds to capture logs

=== ./debugging/capture-logs-continuous.js ===
    // Write to console
    // Write to file if specified
        // Find the main target (usually the first one or the one with the app URL)
            // Enable Runtime domain to receive console messages
            // Enable Console domain
            // Get existing console messages
            // Output ALL Chrome DevTools messages immediately as raw data
            // Write immediately to console and file - force real-time output
// Handle graceful shutdown
// Get output file from command line argument

=== ./tests/playwright.config.js ===
// @ts-check
/**
 * @see https://playwright.dev/docs/test-configuration
 */
  /* Run tests in files in parallel */
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  /* Retry on CI only */
  /* Opt out of parallel tests on CI. */
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
    /* Base URL to use in actions like `await page.goto('/')`. */
    // baseURL: 'http://127.0.0.1:3000',
    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
  /* Configure projects for major browsers */
  /* Run your local dev server before starting the tests */
  // webServer: {
  //   command: 'npm run start',
  //   url: 'http://127.0.0.1:3000',
  //   reuseExistingServer: !process.env.CI,
  // },

=== ./tests/server-management.spec.js ===
    // Launch Electron app
    // Get the first window
    // Wait for app to load
    // Click Add Server button
    // Wait for modal to appear
    // Fill server form
    // Save server
    // Wait for modal to close
    // Verify server appears in list
    // Find and click edit button for Test Server
    // Wait for edit modal
    // Update server name
    // Save changes
    // Wait for modal to close
    // Verify updated name appears
    // Find and click delete button for Updated Test Server
    // Handle confirmation dialog
    // Wait a moment for deletion to process
    // Verify server is removed from list
    // Check if empty state is visible (assuming all servers are deleted)
      // Should show some empty state message or placeholder

=== ./docs/scripts/linenumber.js ===
/*global document */

=== ./docs/scripts/prettify/lang-css.js ===
No comments found

=== ./docs/scripts/prettify/prettify.js ===
No comments found

=== ./composio-service.js ===
/* composio-service.js
 * Lightweight, headless wrapper around the Composio SDK + REST V3 endpoints.
 * Works in any Node ≥18 (global fetch) or browser/Edge-runtime that supports fetch.
 */
// single shared SDK instance (lazy-re-initialisable)
/**
 * Boot the SDK once per API key.
 * Call this first – every other helper throws if you forget.
 * @param {string} apiKey e.g. "sk_live_xxx"
 * @returns {ComposioToolSet}
 */
/* -------------------------------------------------- */
/* -----------------  V3  HELPERS  ------------------ */
/* -------------------------------------------------- */
  // Extract auth_config IDs from connections
  // Log connection details
  // Delete connected accounts first
  // Delete related auth configs
/* -------------------------------------------------- */
/* -----------------  V1  HELPERS  ------------------ */
/* -------------------------------------------------- */
  // try to create auth_config up front (optional but nicer UX)
    // non-fatal – carry on with V1 flow
/* -------------------------------------------------- */
/* -----------------  UTILITIES  -------------------- */
/* -------------------------------------------------- */
  // simple truthy fetch to prove the key works
// Composio sometimes wraps arrays ↔ objects; make it predictable.
/* -------------------------------------------------- */
/* -----------------  EXPORTS  ---------------------- */
/* -------------------------------------------------- */
  // boot / state
  // sanity check
  // V3
  // V1 wrappers

=== ./main.js ===
/*
 * CODING CONSTITUTION - MANDATORY RULES:
 * 
 * 1. Never change anything that has not been discussed with the user or is unrelated to the current task.
 * 2. Never add placeholders or dummy or demo data without an explicit request from the user.
 * 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.
 * 4. Never make assumptions on behalf of the user. If you don't know how to do something or keep going 
 *    round in circles, you stop and think about the cause instead of doing trial and error and wasting 
 *    the user's time and money.
 * 5. When there is a bug, your most important task is to identify the possible reasons and use debugging 
 *    techniques (don't ever ask the user to read code and debug for you) to reduce the search radius, 
 *    e.g. add a log that would confirm an assumption before starting to code.
 * 6. When you fix something and the error is not fixed because you made a wrong assumption, you undo 
 *    this yourself without an explicit request from the user.
 * * 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.* 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.* 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.* 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.* 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.* 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.* 3. Never make a code file larger than 300 lines of code; if it exceeds this, split it as appropriate. 
 *    THE only exceptions ARE JSON DATA FILES, PACKAGE.JSON OR OTHER FILES THAT ARE NOT MEANT TO BE SPLIT.
 * 
 * WARNING: NOT ADHERING TO THESE LAWS IS CONSIDERED BREAKING THE LAW AND COULD LEAD TO SEVERE DAMAGE.
 */
// Pull in the full login-shell PATH for GUI apps
    // Windows and Linux
    // create with a minimal default
// Check if Docker is installed
// Check if Node.js is installed
// Get Docker installation URL based on OS
// Get Node.js installation URL
  // Check prerequisites
  // Pass prerequisite status to renderer
// Get marketplace data path
// Storage for Composio data
// Load composio data on startup
// Save composio data
// Storage for Apify data
// Load apify data on startup
// Save apify data
// Storage for Smithery data
// Load smithery data on startup
// Save smithery data
// Load data on startup
// IPC handlers for Composio storage
// IPC handlers for Apify storage
// IPC handlers for Smithery storage
// IPC handlers
// Restart Claude
    // Path to Claude executable
    // Check if Claude exists
      // Kill existing Claude process
        // Start Claude again
// Get logs directory path
    // Linux
// Parse a log line into a structured object
    // Example log format: 2025-05-12T16:17:33.029Z [tavily-mcp] [info] Initializing server...
    // Check if the message contains JSON
        // Not valid JSON, ignore
// Read log file and parse lines
// IPC handler for selecting a directory
// IPC handler for getting logs
    // Check if logs directory exists
    // Get all log files
    // Read and parse each log file
// IPC handler for fetching a URL
      // Determine if we should use http or https
        // Handle redirects
          // Make a new request to the redirect location
        // Check for successful response
        // Collect response data
      // Set a timeout
// App lifecycle

=== ./electron-debugger/execute-js.js ===
// Helper functions to be executed in the Electron renderer process
            // Log all messages for debugging, but only process responses to our commands
            // console.log('Received message from Electron:', message); 
            // If Electron app closes, the server should probably also close or try to restart Electron
            // For now, we'll just log and keep the command server running.
            // Attempt to reconnect or handle gracefully
    // Basic validation to prevent syntax errors
    // Allow all commands for now - just basic safety check
        // Set a timeout for the command
        // Start the TCP server to listen for commands
                // Validate command before execution
                // If port is in use, assume another instance is running and try to send a test command
                // This part is tricky for a simple net server, usually you'd have a more robust client/server handshake.
                // For now, we'll just exit and let the user know.

=== ./obfuscate.js ===
/**
 * Code Obfuscation Script for MCP Studio
 * 
 * This script obfuscates JavaScript files in the project to protect the source code
 * in the distributed application.
 */
// Configuration for the obfuscator
// Directories to obfuscate
// Files to exclude from obfuscation (if any)
    // Add any files you want to exclude here
// Output directory for obfuscated files
// Create output directory structure
// Copy non-JS files and obfuscate JS files
// First, copy the main files from the root directory
        // Obfuscate JS files
        // Copy non-JS files as-is
// Process directories
            // Create subdirectory if it doesn't exist
            // Process subdirectory
            // Obfuscate JS files
            // Copy non-JS files as-is
// Process all directories
// Copy assets and CSS directories
            // Create subdirectory if it doesn't exist
            // Process subdirectory recursively
            // Copy file
// Copy icon files
