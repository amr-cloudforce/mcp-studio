This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
css/
  style.css
js/
  renderer.js
.gitignore
index.html
main.js
makeicon.sh
package.json
preload.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="makeicon.sh">
#!/usr/bin/env bash
set -e

# Usage: ./generate_icons.sh path/to/source-icon.png
SRC="$1"
if [[ -z "$SRC" || ! -f "$SRC" ]]; then
  echo "Usage: $0 path/to/source-icon.png"
  exit 1
fi

# We'll output everything in the current directory
OUT="."
ICONSET="icon.iconset"

# Clean up any previous runs
rm -rf "$ICONSET"
mkdir "$ICONSET"

# 1) Compress source PNG
pngquant --quality=60-80 --force --output "$OUT/icon-optimized.png" "$SRC"
SRC2="$OUT/icon-optimized.png"

# 2) Generate iconset images for macOS
for SIZE in 16 32 128 256 512; do
  sips -z $SIZE $SIZE     "$SRC2" --out "$ICONSET/icon_${SIZE}x${SIZE}.png"
  sips -z $((SIZE*2)) $((SIZE*2)) "$SRC2" --out "$ICONSET/icon_${SIZE}x${SIZE}@2x.png"
done

# 3) Build the .icns file
iconutil -c icns "$ICONSET" --output "$OUT/icon.icns"

# 4) Cleanup the iconset folder
rm -rf "$ICONSET"

# 5) Build the .ico file for Windows
convert "$SRC2" -define icon:auto-resize=16,32,48,256 "$OUT/icon.ico"

echo "✅ Generated in current directory:"
echo "   icon-optimized.png"
echo "   icon.icns"
echo "   icon.ico"


mv icon-optimized.png icon.png
</file>

<file path="css/style.css">
:root {
    --primary: #4A56E2;
    --danger:  #E25C4A;
    --success: #4CAF50;
    --bg:      #f5f5f5;
    --card:    #fff;
    --text:    #333;
  }
  * { box-sizing: border-box; }
  body {
    margin: 0; padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    background: var(--bg); color: var(--text);
  }
  .container {
    max-width: 1200px;
    margin: auto;
    background: var(--card);
    border-radius: 8px;
    padding: 30px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }
  h1 {
    text-align: center;
    color: var(--primary);
    margin-top: 0;
  }
  .warning {
    color: #c00;
    font-weight: 600;
    margin-bottom: 1em;
    padding: 10px;
    background-color: #fff0f0;
    border-radius: 4px;
  }
  
  .version-tag {
    font-size: 0.5em;
    background: var(--primary);
    color: white;
    padding: 3px 6px;
    border-radius: 10px;
    vertical-align: middle;
    margin-left: 8px;
  }
  
  .status-container {
    margin-top: 10px;
    display: flex;
    align-items: center;
    gap: 15px;
  }
  
  .status-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 5px;
  }
  
  .status-dot.green { background-color: var(--success); }
  .status-dot.red { background-color: var(--danger); }
  .btn {
    display: inline-block;
    padding: 0.6em 1.2em;
    margin: 0 5px 10px 0;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    color: #fff;
  }
  .btn-add    { background: var(--success); }
  .btn-export { background: var(--primary); }
  .btn-reveal { background: #777; }
  .btn-paste  { background: #555; }
  .btn-del    { background: var(--danger); }
  .btn-success{ background: var(--success); }
  .btn:hover  { opacity: 0.9; }
  
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1em;
  }
  th, td {
    padding: 12px;
    border-bottom: 1px solid #ddd;
    text-align: left;
  }
  th { background: #f0f0f0; }
  tr:hover { background: #fafafa; }
  
  .badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.85rem;
    font-weight: 600;
    color: #fff;
  }
  .badge-enabled  { background: var(--success); }
  .badge-disabled { background: var(--danger); }
  
  /* Modal */
  .modal {
    position: fixed; top:0; left:0; right:0; bottom:0;
    background: rgba(0,0,0,0.4);
    display: none;
    align-items: center; justify-content: center;
    z-index: 1000;
  }
  .modal.open { display: flex; }
  .modal-content {
    background: #fff;
    border-radius: 6px;
    padding: 20px;
    width: 90%;
    max-width: 700px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
  }
  .modal-content h2 { margin-top: 0; }
  .close {
    position: absolute; right:16px; top:16px;
    font-size: 1.5rem;
    cursor: pointer;
    color: #999;
  }
  .close:hover { color: #333; }
  
  .modal-header {
    position: relative;
  }
  
  .modal-esc-hint {
    position: absolute;
    right: 45px;
    top: 16px;
    font-size: 0.8rem;
    color: #999;
    display: inline-flex;
    align-items: center;
    gap: 5px;
  }
  
  .kbd {
    display: inline-block;
    padding: 2px 5px;
    background-color: #f1f1f1;
    border: 1px solid #ccc;
    border-radius: 3px;
    font-family: monospace;
    font-size: 0.75rem;
    box-shadow: 0 1px 1px rgba(0,0,0,0.2);
  }
  
  .form-group { margin-bottom: 1em; }
  label       { display: block; margin-bottom: 0.3em; font-weight: 600; }
  input[type="text"],
  textarea    {
    width: 100%;
    padding: 0.5em;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-family: monospace;
  }
  textarea { height: 150px; resize: vertical; }
  .row      { display: flex; gap: 0.5em; margin-bottom: 0.5em; }
  .row input{ flex: 1; }
  .row button{ flex: 0 0 auto; }
  
  .modal-footer { text-align: right; margin-top: 1.5em; }
  
  .type-switch   { display: flex; gap: 1em; margin-bottom: 1em; }
  .form-section  { display: none; }
  .form-section.active { display: block; }
  
  .editor-container {
    height: 300px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
</file>

<file path=".gitignore">
node_modules/
dist/
.DS_Store
</file>

<file path="preload.js">
const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('api', {
  readConfig: () => ipcRenderer.invoke('read-config'),
  writeConfig: cfg => ipcRenderer.invoke('write-config', cfg),
  revealConfig: () => ipcRenderer.invoke('reveal-config'),
  openUrl: url => ipcRenderer.invoke('open-url', url),
  checkPrerequisites: () => ipcRenderer.invoke('check-prerequisites')
});

// Listen for prerequisites status
ipcRenderer.on('prerequisites-status', (_, data) => {
  window.postMessage({ type: 'prerequisites-status', data }, '*');
});
</file>

<file path="js/renderer.js">
// File: js/renderer.js
window.addEventListener('DOMContentLoaded', () => {
    const { readConfig, writeConfig, revealConfig, openUrl, checkPrerequisites } = window.api;
  
    // —— ACE JSON editor setup —— 
    const editor = ace.edit("json-editor");
    editor.setTheme("ace/theme/monokai");
    editor.session.setMode("ace/mode/json");
    editor.setShowPrintMargin(false);
  
    // —— Application state —— 
    let mcpConfig = { mcpServers: {} };
    let currentServer = null;
    
    // —— Helper: Track active modal for Escape key handling ——
    let activeModal = null;
    
    // Function to close the active modal
    function closeActiveModal() {
      if (activeModal) {
        activeModal.classList.remove('open');
        activeModal = null;
        return true;
      }
      return false;
    }
    
    // Function to set active modal
    function setActiveModal(modal) {
      activeModal = modal;
      modal.classList.add('open');
    }
    
    // Global keyboard event listener for Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeActiveModal();
      }
    });
  
    // —— DOM references —— 
    const serverList      = document.getElementById('server-list');
    const versionTag      = document.getElementById('version-tag');
    const prereqWarning   = document.getElementById('prerequisites-warning');
    const prereqMessage   = document.getElementById('prereq-message');
    const missingDocker   = document.getElementById('missing-docker');
    const missingNodejs   = document.getElementById('missing-nodejs');
    const installDockerBtn= document.getElementById('install-docker-btn');
    const installNodejsBtn= document.getElementById('install-nodejs-btn');
    const addBtn          = document.getElementById('add-server-btn');
    const exportBtn       = document.getElementById('export-json-btn');
    const revealBtn       = document.getElementById('reveal-btn');
    const pasteBtn        = document.getElementById('paste-btn');
    const aboutBtn        = document.getElementById('about-btn');
    const aboutModal      = document.getElementById('about-modal');
    const aboutClose      = document.getElementById('about-close');
    const aboutCloseBtn   = document.getElementById('about-close-btn');
    const aboutVersion    = document.getElementById('about-version');
    const dockerStatus    = document.getElementById('docker-status');
    const nodejsStatus    = document.getElementById('nodejs-status');
    const dockerStatusDot = document.getElementById('docker-status-dot');
    const nodejsStatusDot = document.getElementById('nodejs-status-dot');
    const dockerInstLink  = document.getElementById('docker-install-link');
    const nodejsInstLink  = document.getElementById('nodejs-install-link');
    const pasteModal      = document.getElementById('paste-modal');
    const pasteClose      = document.getElementById('paste-close');
    const pasteCancel     = document.getElementById('paste-cancel-btn');
    const pasteLoad       = document.getElementById('paste-load-btn');
    const pasteTextarea   = document.getElementById('paste-json');
    const serverModal     = document.getElementById('server-modal');
    const jsonModal       = document.getElementById('json-modal');
    const closeBtns       = document.querySelectorAll('.close');
    const cancelBtn       = document.getElementById('cancel-btn');
    const downloadJsonBtn = document.getElementById('download-json');
    const jsonCancelBtn   = document.getElementById('json-cancel');
    const form            = document.getElementById('server-form');
  
    // Always‑visible field
    const nameInput       = document.getElementById('server-name');
  
    // Generic fields
    const cmdInput        = document.getElementById('server-cmd');
    const genericArgs     = document.getElementById('args-container');
    const genericEnv      = document.getElementById('env-container');
    const addArgBtnG      = document.getElementById('add-arg-btn');
    const addEnvBtnG      = document.getElementById('add-env-btn');
    const genericDis      = document.getElementById('server-disabled');
  
    // NPX fields
    const npxRepo         = document.getElementById('npx-repo');
    const npxFlags        = document.querySelectorAll('#section-npx input[data-flag]');
    const npxArgs         = document.getElementById('npx-args-container');
    const npxEnv          = document.getElementById('npx-env-container');
    const addArgBtnN      = document.getElementById('add-npx-arg-btn');
    const addEnvBtnN      = document.getElementById('add-npx-env-btn');
    const npxDis          = document.getElementById('npx-disabled');
  
    // Docker fields
    const dockerImage     = document.getElementById('docker-image');
    const dockerFlags     = document.querySelectorAll('#section-docker input[data-flag]');
    const dockerPorts     = document.getElementById('docker-ports');
    const dockerVolumes   = document.getElementById('docker-volumes');
    const dockerEnv       = document.getElementById('docker-env-container');
    const addPortBtn      = document.getElementById('add-docker-port-btn');
    const addVolBtn       = document.getElementById('add-docker-volume-btn');
    const addEnvBtnD      = document.getElementById('add-docker-env-btn');
    const dockerDis       = document.getElementById('docker-disabled');
  
    // Type‑switch radios
    const typeRadios      = document.querySelectorAll('input[name="type"]');
  
    // —— Helper: dynamic row creation —— 
    function makeRow(container, html) {
      const div = document.createElement('div');
      div.className = 'row';
      div.innerHTML = html;
      div.querySelector('button').onclick = () => div.remove();
      container.appendChild(div);
    }
    const addGenericArg   = val => makeRow(genericArgs, `<input type="text" value="${val}"><button class="btn btn-del">&times;</button>`);
    const addGenericEnv   = (k,v)=>makeRow(genericEnv, `<input class="env-key" type="text" placeholder="KEY" value="${k}"><input class="env-val" type="text" placeholder="VALUE" value="${v}"><button class="btn btn-del">&times;</button>`);
    const addNpxArg       = val => makeRow(npxArgs, `<input type="text" value="${val}"><button class="btn btn-del">&times;</button>`);
    const addNpxEnv       = (k,v)=>makeRow(npxEnv, `<input class="env-key" type="text" placeholder="KEY" value="${k}"><input class="env-val" type="text" placeholder="VALUE" value="${v}"><button class="btn btn-del">&times;</button>`);
    const addDockerPort   = val => makeRow(dockerPorts, `<input type="text" placeholder="host:container" value="${val}"><button class="btn btn-del">&times;</button>`);
    const addDockerVolume = val => makeRow(dockerVolumes, `<input type="text" placeholder="src:dst" value="${val}"><button class="btn btn-del">&times;</button>`);
    const addDockerEnv    = (k,v)=>makeRow(dockerEnv, `<input class="env-key" type="text" placeholder="KEY" value="${k}"><input class="env-val" type="text" placeholder="VALUE" value="${v}"><button class="btn btn-del">&times;</button>`);
  
    // —— Toggle form sections —— 
    typeRadios.forEach(radio =>
      radio.addEventListener('change', () => {
        document.querySelectorAll('.form-section').forEach(sec => sec.classList.remove('active'));
        document.getElementById(`section-${radio.value}`).classList.add('active');
      })
    );
  
    // —— Prefill & open modal —— 
    function fillModal(name, cfg, isExisting) {
      currentServer = isExisting ? name : null;
      document.getElementById('modal-title').textContent = isExisting ? 'Edit Server' : 'Add Server';
      form.reset();
      // Clear dynamic containers
      [genericArgs,genericEnv,npxArgs,npxEnv,dockerPorts,dockerVolumes,dockerEnv].forEach(c => c.innerHTML = '');
      // Add one blank row each
      addGenericArg(''); addGenericEnv('','');
      addNpxArg('');     addNpxEnv('','');
      addDockerPort(''); addDockerVolume(''); addDockerEnv('','');
  
      // Always‑visible name
      nameInput.value = name || '';
  
      // Detect type
      const t = cfg.command === 'npx'   ? 'npx'
              : cfg.command === 'docker'? 'docker'
              : 'generic';
      document.querySelector(`input[name="type"][value="${t}"]`).checked = true;
      const sel = document.querySelector(`input[name="type"][value="${t}"]`);
    sel.checked = true;
    sel.dispatchEvent(new Event('change'));
      
      // Populate per‑type fields
      if (t === 'generic') {
        cmdInput.value = cfg.command;
        genericDis.checked = !!cfg.disabled;
        genericArgs.innerHTML = '';
        (cfg.args||[]).forEach(a => addGenericArg(a));
        if (!(cfg.args||[]).length) addGenericArg('');
        genericEnv.innerHTML = '';
        Object.entries(cfg.env||{}).forEach(([k,v]) => addGenericEnv(k,v));
        if (!cfg.env) addGenericEnv('','');
      }
  
      if (t === 'npx') {
        npxDis.checked = !!cfg.disabled;
        const flags = (cfg.args||[]).filter(a => a.startsWith('-'));
        const rest  = (cfg.args||[]).filter(a => !a.startsWith('-'));
        npxFlags.forEach(c => c.checked = flags.includes(c.dataset.flag));
        npxRepo.value = rest[0]||'';
        npxArgs.innerHTML = '';
        rest.slice(1).forEach(a => addNpxArg(a));
        if (rest.length <= 1) addNpxArg('');
        npxEnv.innerHTML = '';
        Object.entries(cfg.env||{}).forEach(([k,v]) => addNpxEnv(k,v));
        if (!cfg.env) addNpxEnv('','');
      }
  
      if (t === 'docker') {
        dockerDis.checked = !!cfg.disabled;
        const flags = (cfg.args||[]).filter(a => a.startsWith('-'));
        const rest  = (cfg.args||[]).filter(a => !a.startsWith('-'));
        dockerFlags.forEach(c => c.checked = flags.includes(c.dataset.flag));
        dockerImage.value = rest[0]||'';
        dockerEnv.innerHTML = '';
        Object.entries(cfg.env||{}).forEach(([k,v]) => addDockerEnv(k,v));
        if (!cfg.env) addDockerEnv('','');
      }
  
      setActiveModal(serverModal);
    }
  
    function openServerModal(name) {
      if (name) {
        fillModal(name, mcpConfig.mcpServers[name], true);
      } else {
        fillModal('', { command:'', args:[], env:{} }, false);
      }
      setActiveModal(serverModal);
    }
  
    // —— “Paste Config” logic —— 
    pasteBtn.onclick    = () => setActiveModal(pasteModal);
    pasteCancel.onclick = closeActiveModal;
    pasteClose.onclick  = closeActiveModal;
    pasteLoad.onclick   = () => {
      let txt = pasteTextarea.value;
      let obj;
      try {
        obj = JSON.parse(txt);
      } catch(e) {
        return alert('Invalid JSON: ' + e.message);
      }
      if (!obj.mcpServers) return alert('Missing "mcpServers"');
      const entries = Object.entries(obj.mcpServers);
      if (entries.length !== 1) return alert('Paste exactly one server entry');
      const [name, cfg] = entries[0];
      closeActiveModal();
      fillModal(name, cfg, false);
    };
  
    // —— Save handler —— 
    async function saveServer(e) {
      e.preventDefault();
      const t = document.querySelector('input[name="type"]:checked').value;
      const name = nameInput.value.trim();
      if (!name) return alert('Name is required');
  
      let cfg = { command:'', args:[] };
  
      if (t === 'generic') {
        cfg.command = cmdInput.value.trim();
        cfg.args = Array.from(genericArgs.querySelectorAll('input'))
                        .map(i => i.value.trim()).filter(Boolean);
        const env = {};
        genericEnv.querySelectorAll('.row').forEach(r => {
          const k = r.querySelector('.env-key').value.trim();
          const v = r.querySelector('.env-val').value.trim();
          if (k) env[k] = v;
        });
        if (Object.keys(env).length) cfg.env = env;
        if (genericDis.checked) cfg.disabled = true;
      }
  
      if (t === 'npx') {
        cfg.command = 'npx';
      
        // Repository (required)
        const repo = npxRepo.value.trim();
        if (!repo) return alert('Repository is required');
      
        // Extra arguments
        const extra = Array
          .from(npxArgs.querySelectorAll('input'))
          .map(i => i.value.trim())
          .filter(Boolean);
      
        // Always include -y
        cfg.args = ['-y', repo, ...extra];
      
        // Environment variables
        const env = {};
        npxEnv.querySelectorAll('.row').forEach(r => {
          const k = r.querySelector('.env-key').value.trim();
          const v = r.querySelector('.env-val').value.trim();
          if (k) env[k] = v;
        });
        if (Object.keys(env).length) cfg.env = env;
      
        // Disabled flag
        if (npxDis.checked) cfg.disabled = true;
      }
  
      if (t === 'docker') {
        cfg.command = 'docker';
        const flags = Array.from(dockerFlags).filter(c => c.checked).map(c => c.dataset.flag);
        const image = dockerImage.value.trim();
        if (!image) return alert('Image name is required');
        const ports = Array.from(dockerPorts.querySelectorAll('input'))
                           .map(i => i.value.trim()).filter(Boolean);
        const vols  = Array.from(dockerVolumes.querySelectorAll('input'))
                           .map(i => i.value.trim()).filter(Boolean);
        const env   = {};
        dockerEnv.querySelectorAll('.row').forEach(r => {
          const k = r.querySelector('.env-key').value.trim();
          const v = r.querySelector('.env-val').value.trim();
          if (k) env[k] = v;
        });
        let args = ['run', ...flags];
        ports.forEach(p => args.push('-p', p));
        vols.forEach(v => {
          const [s,d] = v.split(':');
          args.push('--mount', `type=bind,src=${s},dst=${d}`);
        });
        args.push(image);
        cfg.args = args;
        if (Object.keys(env).length) cfg.env = env;
        if (dockerDis.checked) cfg.disabled = true;
      }
  
      if (currentServer && currentServer !== name) {
        delete mcpConfig.mcpServers[currentServer];
      }
      mcpConfig.mcpServers[name] = cfg;
      await writeConfig(JSON.stringify(mcpConfig, null, 2));
      refreshTable();
      closeActiveModal();
    }
  
    // —— Refresh table view —— 
    function refreshTable() {
      serverList.innerHTML = '';
      Object.entries(mcpConfig.mcpServers).forEach(([n, c]) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${n}</td>
          <td>${c.command}</td>
          <td>
            <span class="badge ${c.disabled?'badge-disabled':'badge-enabled'}">
              ${c.disabled?'Disabled':'Enabled'}
            </span>
          </td>
          <td>
            <button class="btn btn-export" data-edit="${n}">Edit</button>
            <button class="btn btn-del"    data-del ="${n}">Delete</button>
          </td>`;
        serverList.appendChild(tr);
      });
      serverList.querySelectorAll('[data-edit]').forEach(b => 
        b.onclick = () => openServerModal(b.dataset.edit)
      );
      serverList.querySelectorAll('[data-del]').forEach(b =>
        b.onclick = async () => {
          if (!confirm(`Delete "${b.dataset.del}"?`)) return;
          delete mcpConfig.mcpServers[b.dataset.del];
          await writeConfig(JSON.stringify(mcpConfig, null, 2));
          refreshTable();
        }
      );
    }
  
    // —— JSON editor modal —— 
    function showJsonModal() {
      editor.setValue(JSON.stringify(mcpConfig, null, 2), -1);
      setActiveModal(jsonModal);
    }
    async function downloadJson() {
      const txt = editor.getValue();
      try {
        JSON.parse(txt);
        await writeConfig(txt);
        mcpConfig = JSON.parse(txt);
        refreshTable();
        closeActiveModal();
      } catch (e) {
        alert('Invalid JSON: ' + e.message);
      }
    }
  
    // —— Wire up event listeners —— 
    addBtn.onclick         = () => openServerModal();
    exportBtn.onclick      = showJsonModal;
    revealBtn.onclick      = () => revealConfig();
    pasteBtn.onclick       = () => setActiveModal(pasteModal);
    pasteCancel.onclick    = closeActiveModal;
    pasteClose.onclick     = closeActiveModal;
    pasteLoad.onclick      = pasteLoad.onclick; // already defined above
    closeBtns.forEach(b    => b.onclick = closeActiveModal);
    cancelBtn.onclick      = closeActiveModal;
    form.addEventListener('submit', saveServer);
    addArgBtnG.onclick     = () => addGenericArg('');
    addEnvBtnG.onclick     = () => addGenericEnv('','');
    addArgBtnN.onclick     = () => addNpxArg('');
    addEnvBtnN.onclick     = () => addNpxEnv('','');
    addPortBtn.onclick     = () => addDockerPort('');
    addVolBtn.onclick      = () => addDockerVolume('');
    addEnvBtnD.onclick     = () => addDockerEnv('','');
    downloadJsonBtn.onclick= downloadJson;
    jsonCancelBtn.onclick  = closeActiveModal;
    
    // About modal handlers
    aboutBtn.onclick = () => {
      checkPrerequisites().then(status => {
        // Update About modal with prerequisite status
        const { docker, nodejs, dockerUrl, nodejsUrl } = status;
        
        // Docker status
        if (docker) {
          dockerStatus.textContent = 'Installed';
          dockerStatusDot.className = 'status-dot green';
        } else {
          dockerStatus.textContent = 'Not Installed';
          dockerStatusDot.className = 'status-dot red';
        }
        
        // Node.js status
        if (nodejs) {
          nodejsStatus.textContent = 'Installed';
          nodejsStatusDot.className = 'status-dot green';
        } else {
          nodejsStatus.textContent = 'Not Installed';
          nodejsStatusDot.className = 'status-dot red';
        }
        
        // Set version in about modal
        aboutVersion.textContent = versionTag.textContent;
        
        // Installation links
        dockerInstLink.onclick = (e) => {
          e.preventDefault();
          openUrl(dockerUrl);
        };
        
        nodejsInstLink.onclick = (e) => {
          e.preventDefault();
          openUrl(nodejsUrl);
        };
        
        // Show modal
        setActiveModal(aboutModal);
      });
    };
    
    aboutClose.onclick = closeActiveModal;
    aboutCloseBtn.onclick = closeActiveModal;
    
    // —— Prerequisites handlers ——
    installDockerBtn.addEventListener('click', () => {
      checkPrerequisites().then(status => {
        openUrl(status.dockerUrl);
      });
    });
    
    installNodejsBtn.addEventListener('click', () => {
      checkPrerequisites().then(status => {
        openUrl(status.nodejsUrl);
      });
    });
    
    // Listen for prerequisites status from main process
    window.addEventListener('message', event => {
      if (event.data.type === 'prerequisites-status') {
        const { docker, nodejs, appVersion } = event.data.data;
        
        // Display version
        versionTag.textContent = `v${appVersion}`;
        
        // Check prerequisites
        let missingDeps = [];
        
        if (!docker) {
          missingDeps.push('Docker');
          missingDocker.style.display = 'block';
        } else {
          missingDocker.style.display = 'none';
        }
        
        if (!nodejs) {
          missingDeps.push('Node.js');
          missingNodejs.style.display = 'block';
        } else {
          missingNodejs.style.display = 'none';
        }
        
        if (missingDeps.length > 0) {
          prereqMessage.textContent = `Missing dependencies: ${missingDeps.join(', ')}. Please install to use all features.`;
          prereqWarning.style.display = 'block';
        } else {
          prereqWarning.style.display = 'none';
        }
      }
    });
    
    // Manual check for prerequisites (as a backup if IPC event doesn't fire)
    checkPrerequisites().then(status => {
      const { docker, nodejs } = status;
      let missingDeps = [];
      
      if (!docker) {
        missingDeps.push('Docker');
        missingDocker.style.display = 'block';
      }
      
      if (!nodejs) {
        missingDeps.push('Node.js');
        missingNodejs.style.display = 'block';
      }
      
      if (missingDeps.length > 0) {
        prereqMessage.textContent = `Missing dependencies: ${missingDeps.join(', ')}. Please install to use all features.`;
        prereqWarning.style.display = 'block';
      }
    });
  
    // —— Startup load —— 
    readConfig()
      .then(txt => {
        console.log("Loaded MCP config:", txt);
        try {
          mcpConfig = JSON.parse(txt);
        } catch (err) {
          console.error("Invalid JSON in config file:", err);
          mcpConfig = { mcpServers: {} };
        }
        refreshTable();
        
        // If no servers are configured, show the paste dialog automatically
        if (Object.keys(mcpConfig.mcpServers).length === 0) {
          setTimeout(() => setActiveModal(pasteModal), 500);
        }
      })
      .catch(err => {
        console.error("Failed to read config file:", err);
        mcpConfig = { mcpServers: {} };
        refreshTable();
        
        // Show the paste dialog on error as well
        setTimeout(() => setActiveModal(pasteModal), 500);
      });
  });
</file>

<file path="main.js">
const { app, BrowserWindow, ipcMain, shell, dialog } = require('electron');
const path = require('path');
const fs = require('fs').promises;
const { exec } = require('child_process');
const os = require('os');

function getConfigPath() {
  if (process.platform === 'darwin') {
    return path.join(app.getPath('home'), 'Library', 'Application Support', 'Claude', 'claude_desktop_config.json');
  } else {
    // Windows and Linux
    return path.join(app.getPath('appData'), 'Claude', 'claude_desktop_config.json');
  }
}

async function ensureConfigFile() {
  const configPath = getConfigPath();
  const dir = path.dirname(configPath);
  await fs.mkdir(dir, { recursive: true });
  try {
    await fs.access(configPath);
  } catch {
    // create with a minimal default
    const defaultConfig = { mcpServers: {} };
    await fs.writeFile(configPath, JSON.stringify(defaultConfig, null, 2), 'utf-8');
  }
  return configPath;
}

// Check if Docker is installed
async function checkDocker() {
  return new Promise((resolve) => {
    exec('docker --version', (error) => {
      resolve(!error);
    });
  });
}

// Check if Node.js is installed
async function checkNodejs() {
  return new Promise((resolve) => {
    exec('node --version', (error) => {
      resolve(!error);
    });
  });
}

// Get Docker installation URL based on OS
function getDockerInstallUrl() {
  const platform = os.platform();
  if (platform === 'darwin') { // macOS
    return 'https://docs.docker.com/desktop/install/mac/';
  } else if (platform === 'win32') { // Windows
    return 'https://docs.docker.com/desktop/install/windows/';
  } else { // Linux or other
    return 'https://docs.docker.com/engine/install/';
  }
}

// Get Node.js installation URL
function getNodejsInstallUrl() {
  return 'https://nodejs.org/en/download/';
}

async function createWindow() {
  // Check prerequisites
  const dockerInstalled = await checkDocker();
  const nodejsInstalled = await checkNodejs();
  
  const win = new BrowserWindow({
    width: 1200,
    height: 800,
    icon: path.join(__dirname, 'icon.png'),
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false
    }
  });

  await ensureConfigFile();
  win.loadFile('index.html');
  
  // Pass prerequisite status to renderer
  win.webContents.on('did-finish-load', () => {
    win.webContents.send('prerequisites-status', {
      docker: dockerInstalled,
      nodejs: nodejsInstalled,
      dockerUrl: getDockerInstallUrl(),
      nodejsUrl: getNodejsInstallUrl(),
      appVersion: app.getVersion()
    });
  });
}

// IPC handlers
ipcMain.handle('read-config', async () => {
  const file = await ensureConfigFile();
  return fs.readFile(file, 'utf-8');
});

ipcMain.handle('write-config', async (_e, content) => {
  const file = await ensureConfigFile();
  await fs.writeFile(file, content, 'utf-8');
  return file;
});

ipcMain.handle('reveal-config', async () => {
  const file = await ensureConfigFile();
  shell.showItemInFolder(file);
});

ipcMain.handle('open-url', async (_, url) => {
  shell.openExternal(url);
});

ipcMain.handle('check-prerequisites', async () => {
  return {
    docker: await checkDocker(),
    nodejs: await checkNodejs(),
    dockerUrl: getDockerInstallUrl(),
    nodejsUrl: getNodejsInstallUrl()
  };
});

// App lifecycle
app.whenReady().then(createWindow);
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});
app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) createWindow();
});
</file>

<file path="package.json">
{
    "name": "mcp-studio",
    "version": "1.1.0",
    "description": "Electron MCP Studio",
    "main": "main.js",
    "scripts": {
      "start": "electron .",
      "dist": "electron-builder"
    },
    "build": {
      "appId": "com.yourdomain.mcpstudio",
      "productName": "MCP Studio",
      "icon": "icon",
      "files": [
        "**/*"
      ],
      "directories": {
        "output": "dist"
      },
      "mac": {
        "icon": "icon.icns",
        "target": [
          "dmg",
          "zip"
        ]
      },
      "win": {
        "icon": "icon.ico",
        "target": [
          "nsis",
          "zip"
        ]
      },
      "linux": {
        "icon": "icon",
        "target": [
          "AppImage",
          "deb"
        ]
      }
    },
    "devDependencies": {
      "electron": "^25.0.0",
      "electron-builder": "^26.0.12"
    }
  }
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0"/>
  <title>MCP Studio</title>

  <!-- your styles -->
  <link rel="stylesheet" href="css/style.css">

  <!-- Ace for the JSON editor -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.15.2/ace.js"></script>
  <style>
    .app-header {
      display: flex;
      align-items: center;
      gap: 0.5em;
    }
      .app-header img {
    width: 48px;
    height: 48px;
    object-fit: contain;
  }
  </style>
</head>
<body>
  <div class="container">
   
    <div class="app-header">
      <!-- now the icon is forced to 48×48px -->
      <img src="assets/icon.png" alt="MCP Studio" />
      <h1>MCP Studio <span id="version-tag" class="version-tag"></span></h1>
    </div>
    
    <div id="prerequisites-warning" class="warning" style="display: none;">
      ⚠️ <span id="prereq-message">Some prerequisites are missing.</span>
      <div id="missing-docker" style="display: none; margin-top: 5px;">
        <button id="install-docker-btn" class="btn btn-reveal">Install Docker</button>
        <span>Docker is required for Docker-based MCP servers.</span>
      </div>
      <div id="missing-nodejs" style="display: none; margin-top: 5px;">
        <button id="install-nodejs-btn" class="btn btn-reveal">Install Node.js</button>
        <span>Node.js is required for NPX-based MCP servers.</span>
      </div>
    </div>
    <!-- <div class="warning">
      ⚠️ Never include actual API keys or tokens here—use placeholders like <code>[YOUR_API_KEY]</code>.
    </div> -->

    <button id="add-server-btn"  class="btn btn-add">+ Add Server</button>
    <button id="export-json-btn" class="btn btn-export">Export JSON</button>
    <button id="reveal-btn"      class="btn btn-reveal">Open Config Folder</button>
    <button id="paste-btn"       class="btn btn-paste">Paste Config</button>
    <button id="about-btn"       class="btn btn-reveal">About</button>

    <table>
      <thead>
        <tr><th>Name</th><th>Command</th><th>Status</th><th>Actions</th></tr>
      </thead>
      <tbody id="server-list"></tbody>
    </table>
  </div>

  <!-- Paste JSON Modal -->
  <div id="paste-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <span class="close" id="paste-close">&times;</span>
        <span class="modal-esc-hint">Press <span class="kbd">ESC</span> to close</span>
        <h2>Paste Server JSON</h2>
      </div>
      <p>Drop in a snippet containing exactly one server entry under <code>mcpServers</code>:</p>
      <textarea id="paste-json" placeholder='{
  "mcpServers": {
    "github": {
      "command":"npx",
      "args":["-y","@modelcontextprotocol/server-github"],
      "env":{"GITHUB_PERSONAL_ACCESS_TOKEN":"<YOUR_TOKEN>"}
    }
  }
}'></textarea>
      <div class="modal-footer">
        <button id="paste-cancel-btn" class="btn btn-reveal">Cancel</button>
        <button id="paste-load-btn"   class="btn btn-success">Load</button>
      </div>
    </div>
  </div>

  <!-- Add/Edit Server Modal -->
  <div id="server-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <span class="close" id="modal-close">&times;</span>
        <span class="modal-esc-hint">Press <span class="kbd">ESC</span> to close</span>
        <h2 id="modal-title">Add Server</h2>
      </div>
      <form id="server-form" novalidate>
        <!-- Server Name (always visible) -->
        <div class="form-group">
          <label for="server-name">Server Name</label>
          <input id="server-name" type="text" required>
        </div>

        <!-- Type selector -->
        <div class="form-group">
          <label>Server Type:</label>
          <div class="type-switch">
            <label><input type="radio" name="type" value="generic" checked> Generic</label>
            <label><input type="radio" name="type" value="npx"> NPX</label>
            <label><input type="radio" name="type" value="docker"> Docker</label>
          </div>
        </div>

        <!-- Generic inputs -->
        <div id="section-generic" class="form-section active">
          <div class="form-group">
            <label for="server-cmd">Command</label>
            <input id="server-cmd" type="text" required>
          </div>
          <div class="form-group">
            <label>Arguments</label>
            <div id="args-container"></div>
            <button type="button" id="add-arg-btn" class="btn btn-add">+ Arg</button>
          </div>
          <div class="form-group">
            <label>Environment Variables</label>
            <div id="env-container"></div>
            <button type="button" id="add-env-btn" class="btn btn-add">+ Env</button>
          </div>
          <div class="form-group">
            <label><input type="checkbox" id="server-disabled"> Disabled</label>
          </div>
        </div>

        <!-- NPX inputs -->
        <div id="section-npx" class="form-section">
          <div class="form-group">
            <label for="npx-repo">Repository</label>
            <input id="npx-repo" type="text" placeholder="@org/name@version">
            <small>e.g. <code>@example/twitter-mcp@1.2.3</code></small>
          </div>
          <div class="form-group">
            <em><code>npx</code> will always include <code>-y</code>.</em>
          </div>
          <div class="form-group">
            <label>Extra Arguments</label>
            <div id="npx-args-container"></div>
            <button type="button" id="add-npx-arg-btn" class="btn btn-add">+ Arg</button>
          </div>
          <div class="form-group">
            <label>Environment Variables</label>
            <div id="npx-env-container"></div>
            <button type="button" id="add-npx-env-btn" class="btn btn-add">+ Env</button>
          </div>
          <div class="form-group">
            <label><input type="checkbox" id="npx-disabled"> Disabled</label>
          </div>
        </div>

        <!-- Docker inputs -->
        <div id="section-docker" class="form-section">
          <div class="form-group">
            <label for="docker-image">Image Name</label>
            <input id="docker-image" type="text" placeholder="mcp/filesystem:latest">
          </div>
          <div class="form-group">
            <label>Common Flags</label>
            <label><input type="checkbox" data-flag="-d"> -d</label>
            <label><input type="checkbox" data-flag="-it"> -it</label>
            <label><input type="checkbox" data-flag="--rm"> --rm</label>
          </div>
          <div class="form-group">
            <label>Port Mappings</label>
            <div id="docker-ports"></div>
            <button type="button" id="add-docker-port-btn" class="btn btn-add">+ Port</button>
          </div>
          <div class="form-group">
            <label>Volume Mounts</label>
            <div id="docker-volumes"></div>
            <button type="button" id="add-docker-volume-btn" class="btn btn-add">+ Volume</button>
          </div>
          <div class="form-group">
            <label>Environment Variables</label>
            <div id="docker-env-container"></div>
            <button type="button" id="add-docker-env-btn" class="btn btn-add">+ Env</button>
          </div>
          <div class="form-group">
            <label><input type="checkbox" id="docker-disabled"> Disabled</label>
          </div>
        </div>

        <div class="modal-footer">
          <button type="button" id="cancel-btn" class="btn btn-reveal">Cancel</button>
          <button type="submit" id="save-btn"   class="btn btn-success">Save</button>
        </div>
      </form>
    </div>
  </div>

  <!-- JSON Editor Modal -->
  <div id="json-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <span class="close" id="json-close">&times;</span>
        <span class="modal-esc-hint">Press <span class="kbd">ESC</span> to close</span>
        <h2>JSON Configuration</h2>
      </div>
      <div class="editor-container" id="json-editor"></div>
      <div class="modal-footer">
        <button id="json-cancel"   class="btn btn-reveal">Close</button>
        <button id="download-json" class="btn btn-success">Download & Save</button>
      </div>
    </div>
  </div>
  
  <!-- About Modal -->
  <div id="about-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <span class="close" id="about-close">&times;</span>
        <span class="modal-esc-hint">Press <span class="kbd">ESC</span> to close</span>
        <h2>About MCP Studio</h2>
      </div>
      <div class="about-content">
        <p><strong>Version:</strong> <span id="about-version"></span></p>
        <p><strong>Created by:</strong> Claude / MCP Team</p>
        
        <h3>System Information</h3>
        <div class="status-container">
          <div>
            <span class="status-dot" id="docker-status-dot"></span>
            <span>Docker: <span id="docker-status">Checking...</span></span>
          </div>
          <div>
            <span class="status-dot" id="nodejs-status-dot"></span>
            <span>Node.js: <span id="nodejs-status">Checking...</span></span>
          </div>
        </div>
        
        <h3>Installation Links</h3>
        <p>
          <a href="#" id="docker-install-link">Install Docker</a> - Required for Docker-based MCP servers
        </p>
        <p>
          <a href="#" id="nodejs-install-link">Install Node.js</a> - Required for NPX-based MCP servers
        </p>
      </div>
      <div class="modal-footer">
        <button id="about-close-btn" class="btn btn-reveal">Close</button>
      </div>
    </div>
  </div>

  <!-- your application logic -->
  <script defer src="js/renderer.js"></script>
</body>
</html>
</file>

</files>
